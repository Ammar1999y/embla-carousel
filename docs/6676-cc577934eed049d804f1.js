"use strict";(self.webpackChunkembla_carousel_docs=self.webpackChunkembla_carousel_docs||[]).push([[6676],{6676:function(e,n,t){t.r(n),n.default="import { useCallback, useEffect, useRef, useState } from 'react'\nimport { EmblaCarouselType } from 'embla-carousel'\n\ntype UseAutoplayProgressType = {\n  showAutoplayProgress: boolean\n}\n\nexport const useAutoplayProgress = <ProgressElement extends HTMLElement>(\n  emblaApi: EmblaCarouselType | undefined,\n  progressNode: React.RefObject<ProgressElement>\n): UseAutoplayProgressType => {\n  const [showAutoplayProgress, setShowAutoplayProgress] = useState(false)\n  const animationName = useRef('')\n  const timeoutId = useRef(0)\n  const rafId = useRef(0)\n\n  const startProgress = useCallback((timeUntilNext: number | null) => {\n    const node = progressNode.current\n\n    if (!node) return\n    if (timeUntilNext === null) return\n\n    if (!animationName.current) {\n      const style = window.getComputedStyle(node)\n      animationName.current = style.animationName\n    }\n\n    node.style.animationName = 'none'\n    node.style.transform = 'translate3d(0,0,0)'\n\n    rafId.current = window.requestAnimationFrame(() => {\n      timeoutId.current = window.setTimeout(() => {\n        node.style.animationName = animationName.current\n        node.style.animationDuration = `${timeUntilNext}ms`\n      }, 0)\n    })\n\n    setShowAutoplayProgress(true)\n  }, [])\n\n  useEffect(() => {\n    const autoplay = emblaApi?.plugins()?.autoplay\n    if (!autoplay) return\n\n    emblaApi\n      .on('autoplay:timerset', () => startProgress(autoplay.timeUntilNext()))\n      .on('autoplay:timerstopped', () => setShowAutoplayProgress(false))\n  }, [emblaApi])\n\n  useEffect(() => {\n    return () => {\n      cancelAnimationFrame(rafId.current)\n      clearTimeout(timeoutId.current)\n    }\n  }, [])\n\n  return {\n    showAutoplayProgress\n  }\n}\n"}}]);
//# sourceMappingURL=6676-cc577934eed049d804f1.js.map