{"version":3,"file":"2900-779eedf26db62b1cd2eb.js","mappings":"qMAMO,MAAMA,EAA8B,CACzCC,QAAQ,EACRC,YAAa,CAAC,EACdC,cAAe,QCMjB,SAASC,EAAWC,GAClB,IAAIC,EACAC,OAFc,IAAAF,IAAAA,EAAqC,CAAC,GAGxD,IAAIG,EAAyB,GAC7B,MAAMC,EAAiC,CAAC,UAwCxC,SAASC,EACPC,EACAC,GAEA,MAAMC,EACI,YAARD,EAAoBN,EAAQH,cAdhC,WACE,MAAM,cAAEW,GAAkBP,EAASQ,iBAGnC,OAFwBD,EAAcP,EAASS,sBAG5CC,KAAKC,GAAUV,EAAaU,KAC5BC,QAAO,CAACC,EAAGC,IAAMC,KAAKC,IAAIH,EAAGC,IAAI,EACtC,CAOmDG,GAAa,KAC9DjB,EAASkB,gBAAgBC,MAAMb,OAASA,CAC1C,CAQA,MAN6B,CAC3Bc,KAAM,aACNrB,QAASD,EACTuB,KAlDF,SACEC,EACAC,GAEAvB,EAAWsB,EAEX,MAAM,aAAEE,EAAY,eAAEC,GAAmBF,EACnCG,EAAcF,EAAa/B,EAAgBI,EAAW8B,eACtDC,EAAaJ,EAAaE,EAAa5B,GAC7CC,EAAU0B,EAAeG,GAEzB,MACE7B,SAAS,KAAE8B,GAAM,WACjBC,GACE9B,EAASQ,iBAEA,MAATqB,IAEJ5B,EAAe6B,EAAWpB,KAAKqB,GAAcA,EAAUzB,SAEvDJ,EAAa8B,SAAS3B,GAAQL,EAASiC,GAAG5B,EAAKF,KAC/CA,IACF,EA6BE+B,QA3BF,WACEhC,EAAa8B,SAAS3B,GAAQL,EAASmC,IAAI9B,EAAKF,KAChDA,OAAmBiC,EAAW,UAChC,EA2BF,CAEAvC,EAAW8B,mBAAmDS,E,uBCX9D,MAlD2CC,IACzC,MAAM,OAAEC,EAAM,QAAEvC,GAAYsC,GACrBE,EAAUvC,IAAYwC,EAAAA,EAAAA,GAAiBzC,EAAS,CAACF,OAElD,cAAE4C,EAAa,YAAEC,EAAW,iBAAEC,IAClCC,EAAAA,EAAAA,GAAa5C,IAET,gBACJ6C,EAAe,gBACfC,EAAe,kBACfC,EAAiB,kBACjBC,IACEC,EAAAA,EAAAA,IAAmBjD,GAEvB,OACEkD,EAAAA,cAAA,OAAKC,UAAU,SACbD,EAAAA,cAAA,OAAKC,UAAU,kBAAkBC,IAAKb,GACpCW,EAAAA,cAAA,OAAKC,UAAU,oBACZb,EAAO5B,KAAKC,GACXuC,EAAAA,cAAA,OAAKC,UAAU,eAAeE,IAAK1C,GACjCuC,EAAAA,cAAA,OAAKC,UAAU,wBACbD,EAAAA,cAAA,YAAOvC,EAAQ,SAOzBuC,EAAAA,cAAA,OAAKC,UAAU,mBACbD,EAAAA,cAAA,OAAKC,UAAU,kBACbD,EAAAA,cAACI,EAAAA,GAAU,CAACC,QAASR,EAAmBS,SAAUX,IAClDK,EAAAA,cAACO,EAAAA,GAAU,CAACF,QAASP,EAAmBQ,SAAUV,KAGpDI,EAAAA,cAAA,OAAKC,UAAU,eACZT,EAAYhC,KAAI,CAACN,EAAGO,IACnBuC,EAAAA,cAACQ,EAAAA,EAAS,CACRL,IAAK1C,EACL4C,QAASA,IAAMZ,EAAiBhC,GAChCwC,UAAW,aAAaQ,OACtBhD,IAAU8B,EAAgB,wBAA0B,UAM1D,C,2FChDH,MAAMG,EAAeA,CAC1B5C,EACA4D,KAEA,MAAM,EAACnB,EAAc,EAACoB,IAAoBC,EAAAA,EAAAA,UAAS,IAC7C,EAACpB,EAAY,EAACqB,IAAkBD,EAAAA,EAAAA,UAAmB,IAEnDnB,GAAmBqB,EAAAA,EAAAA,cACtBrD,IACMX,IACLA,EAASiE,SAAStD,GACdiD,GAAeA,EAAc5D,GAAS,GAE5C,CAACA,EAAU4D,IAGPM,GAASF,EAAAA,EAAAA,cAAahE,IAC1B+D,EAAe/D,EAASmE,iBAAiB,GACxC,IAEGC,GAAWJ,EAAAA,EAAAA,cAAahE,IAC5B6D,EAAiB7D,EAASS,qBAAqB,GAC9C,IAWH,OATA4D,EAAAA,EAAAA,YAAU,KACHrE,IAELkE,EAAOlE,GACPoE,EAASpE,GAETA,EAASiC,GAAG,SAAUiC,GAAQjC,GAAG,SAAUmC,GAAUnC,GAAG,SAAUmC,GAAS,GAC1E,CAACpE,EAAUkE,EAAQE,IAEf,CACL3B,gBACAC,cACAC,mBACD,EAUUe,EAAiCrB,IAC5C,MAAM,SAAEiC,KAAaC,GAAclC,EAEnC,OACEa,EAAAA,cAAA,SAAAsB,OAAAC,OAAA,CAAQC,KAAK,UAAaH,GACvBD,EACM,C","sources":["webpack://embla-carousel-docs/../src/components/Options.ts","webpack://embla-carousel-docs/../src/components/AutoHeight.ts","webpack://embla-carousel-docs/./src/components/Sandbox/React/SandboxFilesSrc/AutoHeight/EmblaCarousel.tsx","webpack://embla-carousel-docs/./src/components/Sandbox/React/SandboxFilesSrc/EmblaCarouselDotButton.tsx"],"sourcesContent":["import { CreateOptionsType } from 'embla-carousel/components/Options'\n\nexport type OptionsType = CreateOptionsType<{\n  destroyHeight: CSSStyleDeclaration['height']\n}>\n\nexport const defaultOptions: OptionsType = {\n  active: true,\n  breakpoints: {},\n  destroyHeight: 'auto'\n}\n","import { defaultOptions, OptionsType } from './Options'\nimport { CreatePluginType } from 'embla-carousel/components/Plugins'\nimport { OptionsHandlerType } from 'embla-carousel/components/OptionsHandler'\nimport { EmblaCarouselType, EmblaEventType } from 'embla-carousel'\n\ndeclare module 'embla-carousel/components/Plugins' {\n  interface EmblaPluginsType {\n    autoHeight?: AutoHeightType\n  }\n}\n\nexport type AutoHeightType = CreatePluginType<{}, OptionsType>\n\nexport type AutoHeightOptionsType = AutoHeightType['options']\n\nfunction AutoHeight(userOptions: AutoHeightOptionsType = {}): AutoHeightType {\n  let options: OptionsType\n  let emblaApi: EmblaCarouselType\n  let slideHeights: number[] = []\n  const heightEvents: EmblaEventType[] = ['select']\n\n  function init(\n    emblaApiInstance: EmblaCarouselType,\n    optionsHandler: OptionsHandlerType\n  ): void {\n    emblaApi = emblaApiInstance\n\n    const { mergeOptions, optionsAtMedia } = optionsHandler\n    const optionsBase = mergeOptions(defaultOptions, AutoHeight.globalOptions)\n    const allOptions = mergeOptions(optionsBase, userOptions)\n    options = optionsAtMedia(allOptions)\n\n    const {\n      options: { axis },\n      slideRects\n    } = emblaApi.internalEngine()\n\n    if (axis === 'y') return\n\n    slideHeights = slideRects.map((slideRect) => slideRect.height)\n\n    heightEvents.forEach((evt) => emblaApi.on(evt, setContainerHeight))\n    setContainerHeight()\n  }\n\n  function destroy(): void {\n    heightEvents.forEach((evt) => emblaApi.off(evt, setContainerHeight))\n    setContainerHeight(undefined, 'destroy')\n  }\n\n  function highestInView(): number {\n    const { slideRegistry } = emblaApi.internalEngine()\n    const selectedIndexes = slideRegistry[emblaApi.selectedScrollSnap()]\n\n    return selectedIndexes\n      .map((index) => slideHeights[index])\n      .reduce((a, b) => Math.max(a, b), 0)\n  }\n\n  function setContainerHeight(\n    _?: EmblaCarouselType,\n    evt?: EmblaEventType\n  ): void {\n    const height =\n      evt === 'destroy' ? options.destroyHeight : `${highestInView()}px`\n    emblaApi.containerNode().style.height = height\n  }\n\n  const self: AutoHeightType = {\n    name: 'autoHeight',\n    options: userOptions,\n    init,\n    destroy\n  }\n  return self\n}\n\nAutoHeight.globalOptions = <AutoHeightOptionsType | undefined>undefined\n\nexport default AutoHeight\n","import React from 'react'\nimport { EmblaOptionsType } from 'embla-carousel'\nimport useEmblaCarousel from 'embla-carousel-react'\nimport AutoHeight from 'embla-carousel-auto-height'\nimport {\n  NextButton,\n  PrevButton,\n  usePrevNextButtons\n} from '../EmblaCarouselArrowButtons'\nimport { DotButton, useDotButton } from '../EmblaCarouselDotButton'\n\ntype PropType = {\n  slides: number[]\n  options?: EmblaOptionsType\n}\n\nconst EmblaCarousel: React.FC<PropType> = (props) => {\n  const { slides, options } = props\n  const [emblaRef, emblaApi] = useEmblaCarousel(options, [AutoHeight()])\n\n  const { selectedIndex, scrollSnaps, onDotButtonClick } =\n    useDotButton(emblaApi)\n\n  const {\n    prevBtnDisabled,\n    nextBtnDisabled,\n    onPrevButtonClick,\n    onNextButtonClick\n  } = usePrevNextButtons(emblaApi)\n\n  return (\n    <div className=\"embla\">\n      <div className=\"embla__viewport\" ref={emblaRef}>\n        <div className=\"embla__container\">\n          {slides.map((index) => (\n            <div className=\"embla__slide\" key={index}>\n              <div className=\"embla__slide__number\">\n                <span>{index + 1}</span>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <div className=\"embla__controls\">\n        <div className=\"embla__buttons\">\n          <PrevButton onClick={onPrevButtonClick} disabled={prevBtnDisabled} />\n          <NextButton onClick={onNextButtonClick} disabled={nextBtnDisabled} />\n        </div>\n\n        <div className=\"embla__dots\">\n          {scrollSnaps.map((_, index) => (\n            <DotButton\n              key={index}\n              onClick={() => onDotButtonClick(index)}\n              className={'embla__dot'.concat(\n                index === selectedIndex ? ' embla__dot--selected' : ''\n              )}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default EmblaCarousel\n","import React, {\n  PropsWithChildren,\n  useCallback,\n  useEffect,\n  useState\n} from 'react'\nimport { EmblaCarouselType } from 'embla-carousel'\n\ntype UseDotButtonType = {\n  selectedIndex: number\n  scrollSnaps: number[]\n  onDotButtonClick: (index: number) => void\n}\n\nexport const useDotButton = (\n  emblaApi: EmblaCarouselType | undefined,\n  onButtonClick?: (emblaApi: EmblaCarouselType) => void\n): UseDotButtonType => {\n  const [selectedIndex, setSelectedIndex] = useState(0)\n  const [scrollSnaps, setScrollSnaps] = useState<number[]>([])\n\n  const onDotButtonClick = useCallback(\n    (index: number) => {\n      if (!emblaApi) return\n      emblaApi.scrollTo(index)\n      if (onButtonClick) onButtonClick(emblaApi)\n    },\n    [emblaApi, onButtonClick]\n  )\n\n  const onInit = useCallback((emblaApi: EmblaCarouselType) => {\n    setScrollSnaps(emblaApi.scrollSnapList())\n  }, [])\n\n  const onSelect = useCallback((emblaApi: EmblaCarouselType) => {\n    setSelectedIndex(emblaApi.selectedScrollSnap())\n  }, [])\n\n  useEffect(() => {\n    if (!emblaApi) return\n\n    onInit(emblaApi)\n    onSelect(emblaApi)\n\n    emblaApi.on('reInit', onInit).on('reInit', onSelect).on('select', onSelect)\n  }, [emblaApi, onInit, onSelect])\n\n  return {\n    selectedIndex,\n    scrollSnaps,\n    onDotButtonClick\n  }\n}\n\ntype PropType = PropsWithChildren<\n  React.DetailedHTMLProps<\n    React.ButtonHTMLAttributes<HTMLButtonElement>,\n    HTMLButtonElement\n  >\n>\n\nexport const DotButton: React.FC<PropType> = (props) => {\n  const { children, ...restProps } = props\n\n  return (\n    <button type=\"button\" {...restProps}>\n      {children}\n    </button>\n  )\n}\n"],"names":["defaultOptions","active","breakpoints","destroyHeight","AutoHeight","userOptions","options","emblaApi","slideHeights","heightEvents","setContainerHeight","_","evt","height","slideRegistry","internalEngine","selectedScrollSnap","map","index","reduce","a","b","Math","max","highestInView","containerNode","style","name","init","emblaApiInstance","optionsHandler","mergeOptions","optionsAtMedia","optionsBase","globalOptions","allOptions","axis","slideRects","slideRect","forEach","on","destroy","off","undefined","props","slides","emblaRef","useEmblaCarousel","selectedIndex","scrollSnaps","onDotButtonClick","useDotButton","prevBtnDisabled","nextBtnDisabled","onPrevButtonClick","onNextButtonClick","usePrevNextButtons","React","className","ref","key","PrevButton","onClick","disabled","NextButton","DotButton","concat","onButtonClick","setSelectedIndex","useState","setScrollSnaps","useCallback","scrollTo","onInit","scrollSnapList","onSelect","useEffect","children","restProps","Object","assign","type"],"sourceRoot":""}