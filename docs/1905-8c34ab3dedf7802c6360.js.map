{"version":3,"file":"1905-8c34ab3dedf7802c6360.js","mappings":"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","sources":["webpack://embla-carousel-docs/../src/components/Options.ts","webpack://embla-carousel-docs/../src/components/AutoScroll.ts","webpack://embla-carousel-docs/./src/components/Sandbox/React/SandboxFilesSrc/AutoScroll/EmblaCarousel.tsx"],"sourcesContent":["import { CreateOptionsType } from 'embla-carousel/components/Options'\n\nexport type OptionsType = CreateOptionsType<{\n  direction: 'forward' | 'backward'\n  speed: number\n  startDelay: number\n  playOnInit: boolean\n  stopOnFocusIn: boolean\n  stopOnInteraction: boolean\n  stopOnMouseEnter: boolean\n  rootNode: ((emblaRoot: HTMLElement) => HTMLElement | null) | null\n}>\n\nexport const defaultOptions: OptionsType = {\n  direction: 'forward',\n  speed: 2,\n  startDelay: 1000,\n  active: true,\n  breakpoints: {},\n  playOnInit: true,\n  stopOnFocusIn: true,\n  stopOnInteraction: true,\n  stopOnMouseEnter: false,\n  rootNode: null\n}\n","import { OptionsType, defaultOptions } from './Options'\nimport { CreatePluginType } from 'embla-carousel/components/Plugins'\nimport { OptionsHandlerType } from 'embla-carousel/components/OptionsHandler'\nimport { EmblaCarouselType } from 'embla-carousel'\nimport { EngineType } from 'embla-carousel/components/Engine'\nimport { ScrollBodyType } from 'embla-carousel/components/ScrollBody'\n\ndeclare module 'embla-carousel/components/Plugins' {\n  interface EmblaPluginsType {\n    autoScroll?: AutoScrollType\n  }\n}\n\ndeclare module 'embla-carousel/components/EventHandler' {\n  interface EmblaEventListType {\n    autoScrollPlay: 'autoScroll:play'\n    autoScrollStop: 'autoScroll:stop'\n  }\n}\n\nexport type AutoScrollType = CreatePluginType<\n  {\n    play: (delay?: number) => void\n    stop: () => void\n    reset: () => void\n    isPlaying: () => boolean\n  },\n  OptionsType\n>\n\nexport type AutoScrollOptionsType = AutoScrollType['options']\n\nfunction AutoScroll(userOptions: AutoScrollOptionsType = {}): AutoScrollType {\n  let options: OptionsType\n  let emblaApi: EmblaCarouselType\n  let destroyed: boolean\n  let playing = false\n  let resume = true\n  let timer = 0\n  let startDelay: number\n  let defaultScrollBehaviour: ScrollBodyType\n\n  function init(\n    emblaApiInstance: EmblaCarouselType,\n    optionsHandler: OptionsHandlerType\n  ): void {\n    emblaApi = emblaApiInstance\n\n    const { mergeOptions, optionsAtMedia } = optionsHandler\n    const optionsBase = mergeOptions(defaultOptions, AutoScroll.globalOptions)\n    const allOptions = mergeOptions(optionsBase, userOptions)\n    options = optionsAtMedia(allOptions)\n\n    if (emblaApi.scrollSnapList().length <= 1) return\n\n    startDelay = options.startDelay\n    destroyed = false\n    defaultScrollBehaviour = emblaApi.internalEngine().scrollBody\n\n    const { eventStore } = emblaApi.internalEngine()\n    const emblaRoot = emblaApi.rootNode()\n    const root = (options.rootNode && options.rootNode(emblaRoot)) || emblaRoot\n    const container = emblaApi.containerNode()\n\n    emblaApi.on('pointerDown', stopScroll)\n\n    if (!options.stopOnInteraction) {\n      emblaApi.on('pointerUp', startScrollOnSettle)\n    }\n\n    if (options.stopOnMouseEnter) {\n      eventStore.add(root, 'mouseenter', () => {\n        resume = false\n        stopScroll()\n      })\n\n      if (!options.stopOnInteraction) {\n        eventStore.add(root, 'mouseleave', () => {\n          resume = true\n          startScroll()\n        })\n      }\n    }\n\n    if (options.stopOnFocusIn) {\n      eventStore.add(container, 'focusin', () => {\n        stopScroll()\n        emblaApi.scrollTo(emblaApi.selectedScrollSnap(), true)\n      })\n\n      if (!options.stopOnInteraction) {\n        eventStore.add(container, 'focusout', startScroll)\n      }\n    }\n\n    if (options.playOnInit) {\n      emblaApi.on('init', startScroll).on('reInit', startScroll)\n    }\n  }\n\n  function destroy(): void {\n    emblaApi\n      .off('init', startScroll)\n      .off('reInit', startScroll)\n      .off('pointerDown', stopScroll)\n      .off('pointerUp', startScrollOnSettle)\n      .off('settle', onSettle)\n    stopScroll()\n    destroyed = true\n    playing = false\n  }\n\n  function startScroll(): void {\n    if (destroyed || playing) return\n    if (!resume) return\n    emblaApi.emit('autoScroll:play')\n\n    const engine = emblaApi.internalEngine()\n    const { ownerWindow } = engine\n\n    timer = ownerWindow.setTimeout(() => {\n      engine.scrollBody = createAutoScrollBehaviour(engine)\n      engine.animation.start()\n    }, startDelay)\n\n    playing = true\n  }\n\n  function stopScroll(): void {\n    if (destroyed || !playing) return\n    emblaApi.emit('autoScroll:stop')\n\n    const engine = emblaApi.internalEngine()\n    const { ownerWindow } = engine\n\n    engine.scrollBody = defaultScrollBehaviour\n    ownerWindow.clearTimeout(timer)\n    timer = 0\n\n    playing = false\n  }\n\n  function onSettle(): void {\n    if (resume) startScroll()\n    emblaApi.off('settle', onSettle)\n  }\n\n  function startScrollOnSettle(): void {\n    emblaApi.on('settle', onSettle)\n  }\n\n  function createAutoScrollBehaviour(engine: EngineType): ScrollBodyType {\n    const {\n      location,\n      target,\n      scrollTarget,\n      index,\n      indexPrevious,\n      limit: { reachedMin, reachedMax, constrain },\n      options: { loop }\n    } = engine\n    const directionSign = options.direction === 'forward' ? -1 : 1\n    const noop = (): ScrollBodyType => self\n\n    let bodyVelocity = 0\n    let scrollDirection = 0\n    let rawLocation = location.get()\n    let rawLocationPrevious = 0\n    let hasSettled = false\n\n    function seek(): ScrollBodyType {\n      let directionDiff = 0\n\n      bodyVelocity = directionSign * options.speed\n      rawLocation += bodyVelocity\n      location.add(bodyVelocity)\n      target.set(location)\n\n      directionDiff = rawLocation - rawLocationPrevious\n      scrollDirection = Math.sign(directionDiff)\n      rawLocationPrevious = rawLocation\n\n      const currentIndex = scrollTarget.byDistance(0, false).index\n\n      if (index.get() !== currentIndex) {\n        indexPrevious.set(index.get())\n        index.set(currentIndex)\n        emblaApi.emit('select')\n      }\n\n      const reachedEnd =\n        options.direction === 'forward'\n          ? reachedMin(location.get())\n          : reachedMax(location.get())\n\n      if (!loop && reachedEnd) {\n        hasSettled = true\n        const constrainedLocation = constrain(location.get())\n        location.set(constrainedLocation)\n        target.set(location)\n        stopScroll()\n      }\n\n      return self\n    }\n\n    const self: ScrollBodyType = {\n      direction: () => scrollDirection,\n      duration: () => -1,\n      velocity: () => bodyVelocity,\n      settled: () => hasSettled,\n      seek,\n      useBaseFriction: noop,\n      useBaseDuration: noop,\n      useFriction: noop,\n      useDuration: noop\n    }\n    return self\n  }\n\n  function play(startDelayOverride?: number): void {\n    if (typeof startDelayOverride !== 'undefined') {\n      startDelay = startDelayOverride\n    }\n    resume = true\n    startScroll()\n  }\n\n  function stop(): void {\n    if (playing) stopScroll()\n  }\n\n  function reset(): void {\n    if (playing) {\n      stopScroll()\n      startScrollOnSettle()\n    }\n  }\n\n  function isPlaying(): boolean {\n    return playing\n  }\n\n  const self: AutoScrollType = {\n    name: 'autoScroll',\n    options: userOptions,\n    init,\n    destroy,\n    play,\n    stop,\n    reset,\n    isPlaying\n  }\n  return self\n}\n\nAutoScroll.globalOptions = <AutoScrollOptionsType | undefined>undefined\n\nexport default AutoScroll\n","import React, { useCallback, useEffect, useState } from 'react'\nimport { EmblaOptionsType } from 'embla-carousel'\nimport useEmblaCarousel from 'embla-carousel-react'\nimport AutoScroll from 'embla-carousel-auto-scroll'\nimport {\n  NextButton,\n  PrevButton,\n  usePrevNextButtons\n} from '../EmblaCarouselArrowButtons'\n\ntype PropType = {\n  slides: number[]\n  options?: EmblaOptionsType\n}\n\nconst EmblaCarousel: React.FC<PropType> = (props) => {\n  const { slides, options } = props\n  const [emblaRef, emblaApi] = useEmblaCarousel(options, [\n    AutoScroll({ playOnInit: false })\n  ])\n  const [isPlaying, setIsPlaying] = useState(false)\n\n  const {\n    prevBtnDisabled,\n    nextBtnDisabled,\n    onPrevButtonClick,\n    onNextButtonClick\n  } = usePrevNextButtons(emblaApi)\n\n  const onButtonAutoplayClick = useCallback(\n    (callback: () => void) => {\n      const autoScroll = emblaApi?.plugins()?.autoScroll\n      if (!autoScroll) return\n\n      const resetOrStop =\n        autoScroll.options.stopOnInteraction === false\n          ? autoScroll.reset\n          : autoScroll.stop\n\n      resetOrStop()\n      callback()\n    },\n    [emblaApi]\n  )\n\n  const toggleAutoplay = useCallback(() => {\n    const autoScroll = emblaApi?.plugins()?.autoScroll\n    if (!autoScroll) return\n\n    const playOrStop = autoScroll.isPlaying()\n      ? autoScroll.stop\n      : autoScroll.play\n    playOrStop()\n  }, [emblaApi])\n\n  useEffect(() => {\n    const autoScroll = emblaApi?.plugins()?.autoScroll\n    if (!autoScroll) return\n\n    setIsPlaying(autoScroll.isPlaying())\n    emblaApi\n      .on('autoScroll:play', () => setIsPlaying(true))\n      .on('autoScroll:stop', () => setIsPlaying(false))\n      .on('reInit', () => setIsPlaying(false))\n  }, [emblaApi])\n\n  return (\n    <div className=\"embla\">\n      <div className=\"embla__viewport\" ref={emblaRef}>\n        <div className=\"embla__container\">\n          {slides.map((index) => (\n            <div className=\"embla__slide\" key={index}>\n              <div className=\"embla__slide__number\">\n                <span>{index + 1}</span>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <div className=\"embla__controls\">\n        <div className=\"embla__buttons\">\n          <PrevButton\n            onClick={() => onButtonAutoplayClick(onPrevButtonClick)}\n            disabled={prevBtnDisabled}\n          />\n          <NextButton\n            onClick={() => onButtonAutoplayClick(onNextButtonClick)}\n            disabled={nextBtnDisabled}\n          />\n        </div>\n\n        <button className=\"embla__play\" onClick={toggleAutoplay} type=\"button\">\n          {isPlaying ? 'Stop' : 'Start'}\n        </button>\n      </div>\n    </div>\n  )\n}\n\nexport default EmblaCarousel\n"],"names":["defaultOptions","direction","speed","startDelay","active","breakpoints","playOnInit","stopOnFocusIn","stopOnInteraction","stopOnMouseEnter","rootNode","AutoScroll","userOptions","options","emblaApi","destroyed","defaultScrollBehaviour","playing","resume","timer","startScroll","emit","engine","internalEngine","ownerWindow","setTimeout","scrollBody","location","target","scrollTarget","index","indexPrevious","limit","reachedMin","reachedMax","constrain","loop","directionSign","noop","self","bodyVelocity","scrollDirection","rawLocation","get","rawLocationPrevious","hasSettled","seek","directionDiff","add","set","Math","sign","currentIndex","byDistance","reachedEnd","constrainedLocation","stopScroll","duration","velocity","settled","useBaseFriction","useBaseDuration","useFriction","useDuration","createAutoScrollBehaviour","animation","start","clearTimeout","onSettle","off","startScrollOnSettle","on","name","init","emblaApiInstance","optionsHandler","mergeOptions","optionsAtMedia","optionsBase","globalOptions","allOptions","scrollSnapList","length","eventStore","emblaRoot","root","container","containerNode","scrollTo","selectedScrollSnap","destroy","play","startDelayOverride","stop","reset","isPlaying","undefined","props","slides","emblaRef","useEmblaCarousel","setIsPlaying","useState","prevBtnDisabled","nextBtnDisabled","onPrevButtonClick","onNextButtonClick","usePrevNextButtons","onButtonAutoplayClick","useCallback","callback","_emblaApi$plugins","autoScroll","plugins","toggleAutoplay","_emblaApi$plugins2","useEffect","_emblaApi$plugins3","React","className","ref","map","key","PrevButton","onClick","disabled","NextButton","type"],"sourceRoot":""}