{"version":3,"file":"7159-b09d90252dca2d591583.js","mappings":"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","sources":["webpack://embla-carousel-docs/./src/components/Sandbox/React/SandboxFilesSrc/Autoplay/EmblaCarousel.tsx","webpack://embla-carousel-docs/./src/components/Sandbox/React/SandboxFilesSrc/Autoplay/EmblaCarouselAutoplay.tsx","webpack://embla-carousel-docs/./src/components/Sandbox/React/SandboxFilesSrc/Autoplay/EmblaCarouselAutoplayProgress.tsx","webpack://embla-carousel-docs/../src/components/Options.ts","webpack://embla-carousel-docs/../src/components/Autoplay.ts","webpack://embla-carousel-docs/../src/components/utils.ts"],"sourcesContent":["import React, { useRef } from 'react'\nimport { EmblaOptionsType } from 'embla-carousel'\nimport useEmblaCarousel from 'embla-carousel-react'\nimport Autoplay from 'embla-carousel-autoplay'\nimport { useAutoplay } from './EmblaCarouselAutoplay'\nimport { useAutoplayProgress } from './EmblaCarouselAutoplayProgress'\nimport {\n  NextButton,\n  PrevButton,\n  usePrevNextButtons\n} from '../EmblaCarouselArrowButtons'\n\ntype PropType = {\n  slides: number[]\n  options?: EmblaOptionsType\n}\n\nconst EmblaCarousel: React.FC<PropType> = (props) => {\n  const { slides, options } = props\n  const progressNode = useRef<HTMLDivElement>(null)\n  const [emblaRef, emblaApi] = useEmblaCarousel(options, [\n    Autoplay({ playOnInit: false, delay: 3000 })\n  ])\n\n  const {\n    prevBtnDisabled,\n    nextBtnDisabled,\n    onPrevButtonClick,\n    onNextButtonClick\n  } = usePrevNextButtons(emblaApi)\n\n  const { autoplayIsPlaying, toggleAutoplay, onAutoplayButtonClick } =\n    useAutoplay(emblaApi)\n\n  const { showAutoplayProgress } = useAutoplayProgress(emblaApi, progressNode)\n\n  return (\n    <div className=\"embla\">\n      <div className=\"embla__viewport\" ref={emblaRef}>\n        <div className=\"embla__container\">\n          {slides.map((index) => (\n            <div className=\"embla__slide\" key={index}>\n              <div className=\"embla__slide__number\">\n                <span>{index + 1}</span>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <div className=\"embla__controls\">\n        <div className=\"embla__buttons\">\n          <PrevButton\n            onClick={() => onAutoplayButtonClick(onPrevButtonClick)}\n            disabled={prevBtnDisabled}\n          />\n          <NextButton\n            onClick={() => onAutoplayButtonClick(onNextButtonClick)}\n            disabled={nextBtnDisabled}\n          />\n        </div>\n\n        <div\n          className={`embla__progress`.concat(\n            showAutoplayProgress ? '' : ' embla__progress--hidden'\n          )}\n        >\n          <div className=\"embla__progress__bar\" ref={progressNode} />\n        </div>\n\n        <button className=\"embla__play\" onClick={toggleAutoplay} type=\"button\">\n          {autoplayIsPlaying ? 'Stop' : 'Start'}\n        </button>\n      </div>\n    </div>\n  )\n}\n\nexport default EmblaCarousel\n","import { useCallback, useEffect, useState } from 'react'\nimport { EmblaCarouselType } from 'embla-carousel'\n\ntype UseAutoplayType = {\n  autoplayIsPlaying: boolean\n  toggleAutoplay: () => void\n  onAutoplayButtonClick: (callback: () => void) => void\n}\n\nexport const useAutoplay = (\n  emblaApi: EmblaCarouselType | undefined\n): UseAutoplayType => {\n  const [autoplayIsPlaying, setAutoplayIsPlaying] = useState(false)\n\n  const onAutoplayButtonClick = useCallback(\n    (callback: () => void) => {\n      const autoplay = emblaApi?.plugins()?.autoplay\n      if (!autoplay) return\n\n      const resetOrStop =\n        autoplay.options.stopOnInteraction === false\n          ? autoplay.reset\n          : autoplay.stop\n\n      resetOrStop()\n      callback()\n    },\n    [emblaApi]\n  )\n\n  const toggleAutoplay = useCallback(() => {\n    const autoplay = emblaApi?.plugins()?.autoplay\n    if (!autoplay) return\n\n    const playOrStop = autoplay.isPlaying() ? autoplay.stop : autoplay.play\n    playOrStop()\n  }, [emblaApi])\n\n  useEffect(() => {\n    const autoplay = emblaApi?.plugins()?.autoplay\n    if (!autoplay) return\n\n    setAutoplayIsPlaying(autoplay.isPlaying())\n    emblaApi\n      .on('autoplay:play', () => setAutoplayIsPlaying(true))\n      .on('autoplay:stop', () => setAutoplayIsPlaying(false))\n      .on('reInit', () => setAutoplayIsPlaying(autoplay.isPlaying()))\n  }, [emblaApi])\n\n  return {\n    autoplayIsPlaying,\n    toggleAutoplay,\n    onAutoplayButtonClick\n  }\n}\n","import { useCallback, useEffect, useRef, useState } from 'react'\nimport { EmblaCarouselType } from 'embla-carousel'\n\ntype UseAutoplayProgressType = {\n  showAutoplayProgress: boolean\n}\n\nexport const useAutoplayProgress = <ProgressElement extends HTMLElement>(\n  emblaApi: EmblaCarouselType | undefined,\n  progressNode: React.RefObject<ProgressElement>\n): UseAutoplayProgressType => {\n  const [showAutoplayProgress, setShowAutoplayProgress] = useState(false)\n  const animationName = useRef('')\n  const timeoutId = useRef(0)\n  const rafId = useRef(0)\n\n  const startProgress = useCallback((timeUntilNext: number | null) => {\n    const node = progressNode.current\n\n    if (!node) return\n    if (timeUntilNext === null) return\n\n    if (!animationName.current) {\n      const style = window.getComputedStyle(node)\n      animationName.current = style.animationName\n    }\n\n    node.style.animationName = 'none'\n    node.style.transform = 'translate3d(0,0,0)'\n\n    rafId.current = window.requestAnimationFrame(() => {\n      timeoutId.current = window.setTimeout(() => {\n        node.style.animationName = animationName.current\n        node.style.animationDuration = `${timeUntilNext}ms`\n      }, 0)\n    })\n\n    setShowAutoplayProgress(true)\n  }, [])\n\n  useEffect(() => {\n    const autoplay = emblaApi?.plugins()?.autoplay\n    if (!autoplay) return\n\n    emblaApi\n      .on('autoplay:timerset', () => startProgress(autoplay.timeUntilNext()))\n      .on('autoplay:timerstopped', () => setShowAutoplayProgress(false))\n  }, [emblaApi])\n\n  useEffect(() => {\n    return () => {\n      cancelAnimationFrame(rafId.current)\n      clearTimeout(timeoutId.current)\n    }\n  }, [])\n\n  return {\n    showAutoplayProgress\n  }\n}\n","import { CreateOptionsType, EmblaCarouselType } from 'embla-carousel'\n\nexport type DelayOptionType =\n  | number\n  | ((scrollSnaps: number[], emblaApi: EmblaCarouselType) => number[])\n\nexport type RootNodeType =\n  | null\n  | ((emblaRoot: HTMLElement) => HTMLElement | null)\n\nexport type OptionsType = CreateOptionsType<{\n  delay: DelayOptionType\n  jump: boolean\n  playOnInit: boolean\n  stopOnFocusIn: boolean\n  stopOnInteraction: boolean\n  stopOnMouseEnter: boolean\n  stopOnLastSnap: boolean\n  rootNode: RootNodeType\n}>\n\nexport const defaultOptions: OptionsType = {\n  active: true,\n  breakpoints: {},\n  delay: 4000,\n  jump: false,\n  playOnInit: true,\n  stopOnFocusIn: true,\n  stopOnInteraction: true,\n  stopOnMouseEnter: false,\n  stopOnLastSnap: false,\n  rootNode: null\n}\n","import { OptionsType, defaultOptions } from './Options'\nimport { getAutoplayRootNode, normalizeDelay } from './utils'\nimport {\n  CreatePluginType,\n  OptionsHandlerType,\n  EmblaCarouselType\n} from 'embla-carousel'\n\ndeclare module 'embla-carousel' {\n  interface EmblaPluginsType {\n    autoplay: AutoplayType\n  }\n\n  interface EmblaEventListType {\n    autoplayPlay: 'autoplay:play'\n    autoplayStop: 'autoplay:stop'\n    autoplaySelect: 'autoplay:select'\n    autoplayTimerSet: 'autoplay:timerset'\n    autoplayTimerStopped: 'autoplay:timerstopped'\n  }\n}\n\nexport type AutoplayType = CreatePluginType<\n  {\n    play: (jump?: boolean) => void\n    stop: () => void\n    reset: () => void\n    isPlaying: () => boolean\n    timeUntilNext: () => number | null\n  },\n  OptionsType\n>\n\nexport type AutoplayOptionsType = AutoplayType['options']\n\nfunction Autoplay(userOptions: AutoplayOptionsType = {}): AutoplayType {\n  let options: OptionsType\n  let emblaApi: EmblaCarouselType\n  let destroyed: boolean\n  let delay: ReturnType<EmblaCarouselType['scrollSnapList']>\n  let timerStartTime: null | number = null\n  let timerId = 0\n  let autoplayActive = false\n  let mouseIsOver = false\n  let playOnDocumentVisible = false\n  let jump = false\n\n  function init(\n    emblaApiInstance: EmblaCarouselType,\n    optionsHandler: OptionsHandlerType\n  ): void {\n    emblaApi = emblaApiInstance\n\n    const { mergeOptions, optionsAtMedia } = optionsHandler\n    const optionsBase = mergeOptions(defaultOptions, Autoplay.globalOptions)\n    const allOptions = mergeOptions(optionsBase, userOptions)\n    options = optionsAtMedia(allOptions)\n\n    if (emblaApi.scrollSnapList().length <= 1) return\n\n    jump = options.jump\n    destroyed = false\n    delay = normalizeDelay(emblaApi, options.delay)\n\n    const { eventStore, ownerDocument } = emblaApi.internalEngine()\n    const isDraggable = !!emblaApi.internalEngine().options.watchDrag\n    const root = getAutoplayRootNode(emblaApi, options.rootNode)\n\n    eventStore.add(ownerDocument, 'visibilitychange', visibilityChange)\n\n    if (isDraggable) {\n      emblaApi.on('pointerDown', pointerDown)\n    }\n\n    if (isDraggable && !options.stopOnInteraction) {\n      emblaApi.on('pointerUp', pointerUp)\n    }\n\n    if (options.stopOnMouseEnter) {\n      eventStore.add(root, 'mouseenter', mouseEnter)\n    }\n\n    if (options.stopOnMouseEnter && !options.stopOnInteraction) {\n      eventStore.add(root, 'mouseleave', mouseLeave)\n    }\n\n    if (options.stopOnFocusIn) {\n      emblaApi.on('slideFocusStart', stopAutoplay)\n    }\n\n    if (options.stopOnFocusIn && !options.stopOnInteraction) {\n      eventStore.add(emblaApi.containerNode(), 'focusout', startAutoplay)\n    }\n\n    if (options.playOnInit) startAutoplay()\n  }\n\n  function destroy(): void {\n    emblaApi\n      .off('pointerDown', pointerDown)\n      .off('pointerUp', pointerUp)\n      .off('slideFocusStart', stopAutoplay)\n\n    stopAutoplay()\n    destroyed = true\n    autoplayActive = false\n  }\n\n  function setTimer(): void {\n    const { ownerWindow } = emblaApi.internalEngine()\n    ownerWindow.clearTimeout(timerId)\n    timerId = ownerWindow.setTimeout(next, delay[emblaApi.selectedScrollSnap()])\n    timerStartTime = new Date().getTime()\n    emblaApi.emit('autoplay:timerset')\n  }\n\n  function clearTimer(): void {\n    const { ownerWindow } = emblaApi.internalEngine()\n    ownerWindow.clearTimeout(timerId)\n    timerId = 0\n    timerStartTime = null\n    emblaApi.emit('autoplay:timerstopped')\n  }\n\n  function startAutoplay(): void {\n    if (destroyed) return\n    if (documentIsHidden()) {\n      playOnDocumentVisible = true\n      return\n    }\n    if (!autoplayActive) emblaApi.emit('autoplay:play')\n\n    setTimer()\n    autoplayActive = true\n  }\n\n  function stopAutoplay(): void {\n    if (destroyed) return\n    if (autoplayActive) emblaApi.emit('autoplay:stop')\n\n    clearTimer()\n    autoplayActive = false\n  }\n\n  function visibilityChange(): void {\n    if (documentIsHidden()) {\n      playOnDocumentVisible = autoplayActive\n      return stopAutoplay()\n    }\n\n    if (playOnDocumentVisible) startAutoplay()\n  }\n\n  function documentIsHidden(): boolean {\n    const { ownerDocument } = emblaApi.internalEngine()\n    return ownerDocument.visibilityState === 'hidden'\n  }\n\n  function pointerDown(): void {\n    if (!mouseIsOver) stopAutoplay()\n  }\n\n  function pointerUp(): void {\n    if (!mouseIsOver) startAutoplay()\n  }\n\n  function mouseEnter(): void {\n    mouseIsOver = true\n    stopAutoplay()\n  }\n\n  function mouseLeave(): void {\n    mouseIsOver = false\n    startAutoplay()\n  }\n\n  function play(jumpOverride?: boolean): void {\n    if (typeof jumpOverride !== 'undefined') jump = jumpOverride\n    startAutoplay()\n  }\n\n  function stop(): void {\n    if (autoplayActive) stopAutoplay()\n  }\n\n  function reset(): void {\n    if (autoplayActive) startAutoplay()\n  }\n\n  function isPlaying(): boolean {\n    return autoplayActive\n  }\n\n  function next(): void {\n    const { index } = emblaApi.internalEngine()\n    const nextIndex = index.clone().add(1).get()\n    const lastIndex = emblaApi.scrollSnapList().length - 1\n    const kill = options.stopOnLastSnap && nextIndex === lastIndex\n\n    if (emblaApi.canScrollNext()) {\n      emblaApi.scrollNext(jump)\n    } else {\n      emblaApi.scrollTo(0, jump)\n    }\n\n    emblaApi.emit('autoplay:select')\n\n    if (kill) return stopAutoplay()\n    startAutoplay()\n  }\n\n  function timeUntilNext(): number | null {\n    if (!timerStartTime) return null\n    const currentDelay = delay[emblaApi.selectedScrollSnap()]\n    const timePastSinceStart = new Date().getTime() - timerStartTime\n    return currentDelay - timePastSinceStart\n  }\n\n  const self: AutoplayType = {\n    name: 'autoplay',\n    options: userOptions,\n    init,\n    destroy,\n    play,\n    stop,\n    reset,\n    isPlaying,\n    timeUntilNext\n  }\n  return self\n}\n\ndeclare namespace Autoplay {\n  let globalOptions: AutoplayOptionsType | undefined\n}\n\nAutoplay.globalOptions = undefined\n\nexport default Autoplay\n","import { EmblaCarouselType } from 'embla-carousel/components/EmblaCarousel'\nimport { DelayOptionType, RootNodeType } from './Options'\n\nexport function normalizeDelay(\n  emblaApi: EmblaCarouselType,\n  delay: DelayOptionType\n): number[] {\n  const scrollSnaps = emblaApi.scrollSnapList()\n\n  if (typeof delay === 'number') {\n    return scrollSnaps.map(() => delay)\n  }\n  return delay(scrollSnaps, emblaApi)\n}\n\nexport function getAutoplayRootNode(\n  emblaApi: EmblaCarouselType,\n  rootNode: RootNodeType\n): HTMLElement {\n  const emblaRootNode = emblaApi.rootNode()\n  return (rootNode && rootNode(emblaRootNode)) || emblaRootNode\n}\n"],"names":["props","slides","options","progressNode","useRef","emblaRef","emblaApi","useEmblaCarousel","Autoplay","playOnInit","delay","prevBtnDisabled","nextBtnDisabled","onPrevButtonClick","onNextButtonClick","usePrevNextButtons","autoplayIsPlaying","toggleAutoplay","onAutoplayButtonClick","setAutoplayIsPlaying","useState","useCallback","callback","_emblaApi$plugins","autoplay","plugins","stopOnInteraction","reset","stop","_emblaApi$plugins2","isPlaying","play","useEffect","_emblaApi$plugins3","on","useAutoplay","showAutoplayProgress","useAutoplayProgress","setShowAutoplayProgress","animationName","timeoutId","rafId","startProgress","timeUntilNext","node","current","style","window","getComputedStyle","transform","requestAnimationFrame","setTimeout","animationDuration","cancelAnimationFrame","clearTimeout","React","className","ref","map","index","key","PrevButton","onClick","disabled","NextButton","concat","type","defaultOptions","active","breakpoints","jump","stopOnFocusIn","stopOnMouseEnter","stopOnLastSnap","rootNode","userOptions","destroyed","timerStartTime","timerId","autoplayActive","mouseIsOver","playOnDocumentVisible","startAutoplay","documentIsHidden","emit","ownerWindow","internalEngine","next","selectedScrollSnap","Date","getTime","setTimer","stopAutoplay","clearTimer","visibilityChange","ownerDocument","visibilityState","pointerDown","pointerUp","mouseEnter","mouseLeave","nextIndex","clone","add","get","lastIndex","scrollSnapList","length","kill","canScrollNext","scrollNext","scrollTo","name","init","emblaApiInstance","optionsHandler","mergeOptions","optionsAtMedia","optionsBase","globalOptions","allOptions","scrollSnaps","normalizeDelay","eventStore","isDraggable","watchDrag","root","emblaRootNode","getAutoplayRootNode","containerNode","destroy","off","jumpOverride","undefined"],"sourceRoot":""}