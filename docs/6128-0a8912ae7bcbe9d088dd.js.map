{"version":3,"file":"6128-0a8912ae7bcbe9d088dd.js","mappings":"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","sources":["webpack://embla-carousel-docs/./src/components/Sandbox/React/SandboxFilesSrc/ClassNames/EmblaCarousel.tsx","webpack://embla-carousel-docs/./src/components/Sandbox/React/SandboxFilesSrc/EmblaCarouselDotButton.tsx","webpack://embla-carousel-docs/./src/components/Sandbox/sandboxImages.ts","webpack://embla-carousel-docs/./src/assets/images/slide-1.jpg","webpack://embla-carousel-docs/./src/assets/images/slide-2.jpg","webpack://embla-carousel-docs/./src/assets/images/slide-3.jpg","webpack://embla-carousel-docs/./src/assets/images/slide-4.jpg","webpack://embla-carousel-docs/./src/assets/images/slide-5.jpg","webpack://embla-carousel-docs/../src/components/Options.ts","webpack://embla-carousel-docs/../src/components/utils.ts","webpack://embla-carousel-docs/../src/components/ClassNames.ts"],"sourcesContent":["import React from 'react'\nimport { EmblaOptionsType } from 'embla-carousel'\nimport useEmblaCarousel from 'embla-carousel-react'\nimport ClassNames from 'embla-carousel-class-names'\nimport {\n  NextButton,\n  PrevButton,\n  usePrevNextButtons\n} from '../EmblaCarouselArrowButtons'\nimport { DotButton, useDotButton } from '../EmblaCarouselDotButton'\nimport { sandboxImages } from 'components/Sandbox/sandboxImages'\n\ntype PropType = {\n  slides: number[]\n  options?: EmblaOptionsType\n}\n\nconst EmblaCarousel: React.FC<PropType> = (props) => {\n  const { slides, options } = props\n  const [emblaRef, emblaApi] = useEmblaCarousel(options, [ClassNames()])\n\n  const { selectedIndex, scrollSnaps, onDotButtonClick } =\n    useDotButton(emblaApi)\n\n  const {\n    prevBtnDisabled,\n    nextBtnDisabled,\n    onPrevButtonClick,\n    onNextButtonClick\n  } = usePrevNextButtons(emblaApi)\n\n  return (\n    <div className=\"embla\">\n      <div className=\"embla__viewport\" ref={emblaRef}>\n        <div className=\"embla__container\">\n          {slides.map((index) => (\n            <div className=\"embla__slide embla__class-names\" key={index}>\n              <img\n                className=\"embla__slide__img\"\n                src={sandboxImages(index)}\n                alt=\"Your alt text\"\n              />\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <div className=\"embla__controls\">\n        <div className=\"embla__buttons\">\n          <PrevButton onClick={onPrevButtonClick} disabled={prevBtnDisabled} />\n          <NextButton onClick={onNextButtonClick} disabled={nextBtnDisabled} />\n        </div>\n\n        <div className=\"embla__dots\">\n          {scrollSnaps.map((_, index) => (\n            <DotButton\n              key={index}\n              onClick={() => onDotButtonClick(index)}\n              className={'embla__dot'.concat(\n                index === selectedIndex ? ' embla__dot--selected' : ''\n              )}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default EmblaCarousel\n","import React, {\n  PropsWithChildren,\n  useCallback,\n  useEffect,\n  useState\n} from 'react'\nimport { EmblaCarouselType } from 'embla-carousel'\n\ntype UseDotButtonType = {\n  selectedIndex: number\n  scrollSnaps: number[]\n  onDotButtonClick: (index: number) => void\n}\n\nexport const useDotButton = (\n  emblaApi: EmblaCarouselType | undefined,\n  onButtonClick?: (emblaApi: EmblaCarouselType) => void\n): UseDotButtonType => {\n  const [selectedIndex, setSelectedIndex] = useState(0)\n  const [scrollSnaps, setScrollSnaps] = useState<number[]>([])\n\n  const onDotButtonClick = useCallback(\n    (index: number) => {\n      if (!emblaApi) return\n      emblaApi.scrollTo(index)\n      if (onButtonClick) onButtonClick(emblaApi)\n    },\n    [emblaApi, onButtonClick]\n  )\n\n  const onInit = useCallback((emblaApi: EmblaCarouselType) => {\n    setScrollSnaps(emblaApi.scrollSnapList())\n  }, [])\n\n  const onSelect = useCallback((emblaApi: EmblaCarouselType) => {\n    setSelectedIndex(emblaApi.selectedScrollSnap())\n  }, [])\n\n  useEffect(() => {\n    if (!emblaApi) return\n\n    onInit(emblaApi)\n    onSelect(emblaApi)\n    emblaApi.on('reInit', onInit)\n    emblaApi.on('reInit', onSelect)\n    emblaApi.on('select', onSelect)\n  }, [emblaApi, onInit, onSelect])\n\n  return {\n    selectedIndex,\n    scrollSnaps,\n    onDotButtonClick\n  }\n}\n\ntype PropType = PropsWithChildren<\n  React.DetailedHTMLProps<\n    React.ButtonHTMLAttributes<HTMLButtonElement>,\n    HTMLButtonElement\n  >\n>\n\nexport const DotButton: React.FC<PropType> = (props) => {\n  const { children, ...restProps } = props\n\n  return (\n    <button type=\"button\" {...restProps}>\n      {children}\n    </button>\n  )\n}\n","import image1 from 'assets/images/slide-1.jpg'\nimport image2 from 'assets/images/slide-2.jpg'\nimport image3 from 'assets/images/slide-3.jpg'\nimport image4 from 'assets/images/slide-4.jpg'\nimport image5 from 'assets/images/slide-5.jpg'\n\nconst sandboxImageList: string[] = [image1, image2, image3, image4, image5]\n\nexport const sandboxImages = (index: number): string =>\n  sandboxImageList[index % sandboxImageList.length]\n","export default __webpack_public_path__ + \"static/slide-1-47ed6052f4455272d8f76db16447d760.jpg\";","export default __webpack_public_path__ + \"static/slide-2-dc15cfe63eb4aeb8c9c09823179ee64c.jpg\";","export default __webpack_public_path__ + \"static/slide-3-6362505742d23d7cd240880140151a95.jpg\";","export default __webpack_public_path__ + \"static/slide-4-ebad84cfea5ff9481504ded363c22003.jpg\";","export default __webpack_public_path__ + \"static/slide-5-2d88e98502aa565d6269834d7a7be406.jpg\";","import { CreateOptionsType } from 'embla-carousel/components/Options'\n\nexport type OptionsType = CreateOptionsType<{\n  snapped: string\n  inView: string\n  draggable: string\n  dragging: string\n}>\n\nexport const defaultOptions: OptionsType = {\n  active: true,\n  breakpoints: {},\n  snapped: 'is-snapped',\n  inView: 'is-in-view',\n  draggable: 'is-draggable',\n  dragging: 'is-dragging'\n}\n","export function removeClass(node: HTMLElement, className: string): void {\n  if (!node || !className) return\n  const { classList } = node\n  if (classList.contains(className)) classList.remove(className)\n}\n\nexport function addClass(node: HTMLElement, className: string): void {\n  if (!node || !className) return\n  const { classList } = node\n  if (!classList.contains(className)) classList.add(className)\n}\n\nexport function nodeListToArray(nodeList: NodeListOf<Element>): HTMLElement[] {\n  return <HTMLElement[]>Array.from(nodeList)\n}\n","import { defaultOptions, OptionsType } from './Options'\nimport { nodeListToArray, addClass, removeClass } from './utils'\nimport { CreatePluginType } from 'embla-carousel/components/Plugins'\nimport { EmblaCarouselType, EmblaEventType } from 'embla-carousel'\nimport { OptionsHandlerType } from 'embla-carousel/components/OptionsHandler'\n\ndeclare module 'embla-carousel/components/Plugins' {\n  interface EmblaPluginsType {\n    classNames?: ClassNamesType\n  }\n}\n\nexport type ClassNamesType = CreatePluginType<{}, OptionsType>\n\nexport type ClassNamesOptionsType = ClassNamesType['options']\n\nfunction ClassNames(userOptions: ClassNamesOptionsType = {}): ClassNamesType {\n  let options: OptionsType\n  let emblaApi: EmblaCarouselType\n  let root: HTMLElement\n  let slides: HTMLElement[]\n  const selectedEvents: EmblaEventType[] = ['select']\n  const draggingEvents: EmblaEventType[] = ['pointerDown', 'pointerUp']\n  const inViewEvents: EmblaEventType[] = ['slidesInView']\n\n  function init(\n    emblaApiInstance: EmblaCarouselType,\n    optionsHandler: OptionsHandlerType\n  ): void {\n    emblaApi = emblaApiInstance\n\n    const { mergeOptions, optionsAtMedia } = optionsHandler\n    const optionsBase = mergeOptions(defaultOptions, ClassNames.globalOptions)\n    const allOptions = mergeOptions(optionsBase, userOptions)\n    options = optionsAtMedia(allOptions)\n\n    root = emblaApi.rootNode()\n    slides = emblaApi.slideNodes()\n    const isDraggable = !!emblaApi.internalEngine().options.watchDrag\n\n    if (isDraggable) {\n      addClass(root, options.draggable)\n    }\n    if (options.dragging) {\n      draggingEvents.forEach((evt) => emblaApi.on(evt, toggleDraggingClass))\n    }\n    if (options.snapped) {\n      selectedEvents.forEach((evt) => emblaApi.on(evt, toggleSnappedClasses))\n      toggleSnappedClasses()\n    }\n    if (options.inView) {\n      inViewEvents.forEach((evt) => emblaApi.on(evt, toggleInViewClasses))\n      toggleInViewClasses()\n    }\n  }\n\n  function destroy(): void {\n    removeClass(root, options.draggable)\n    draggingEvents.forEach((evt) => emblaApi.off(evt, toggleDraggingClass))\n    selectedEvents.forEach((evt) => emblaApi.off(evt, toggleSnappedClasses))\n    inViewEvents.forEach((evt) => emblaApi.off(evt, toggleInViewClasses))\n    slides.forEach((slide) => removeClass(slide, options.snapped))\n  }\n\n  function toggleDraggingClass(\n    _: EmblaCarouselType,\n    evt: EmblaEventType\n  ): void {\n    if (evt === 'pointerDown') addClass(root, options.dragging)\n    else removeClass(root, options.dragging)\n  }\n\n  function toggleSlideClasses(slideIndexes: number[], className: string): void {\n    const container = emblaApi.containerNode()\n    const slideNodeList = container.querySelectorAll(`.${className}`)\n    const removeClassSlides = nodeListToArray(slideNodeList)\n\n    removeClassSlides.forEach((slide) => removeClass(slide, className))\n    slideIndexes.forEach((index) => addClass(slides[index], className))\n  }\n\n  function toggleSnappedClasses(): void {\n    const { slideRegistry } = emblaApi.internalEngine()\n    const slideIndexes = slideRegistry[emblaApi.selectedScrollSnap()]\n    toggleSlideClasses(slideIndexes, options.snapped)\n  }\n\n  function toggleInViewClasses(): void {\n    const slideIndexes = emblaApi.slidesInView()\n    toggleSlideClasses(slideIndexes, options.inView)\n  }\n\n  const self: ClassNamesType = {\n    name: 'classNames',\n    options: userOptions,\n    init,\n    destroy\n  }\n  return self\n}\n\nClassNames.globalOptions = <ClassNamesOptionsType | undefined>undefined\n\nexport default ClassNames\n"],"names":["props","slides","options","emblaRef","emblaApi","useEmblaCarousel","ClassNames","selectedIndex","scrollSnaps","onDotButtonClick","useDotButton","prevBtnDisabled","nextBtnDisabled","onPrevButtonClick","onNextButtonClick","usePrevNextButtons","React","className","ref","map","index","key","src","sandboxImages","alt","PrevButton","onClick","disabled","NextButton","_","DotButton","concat","onButtonClick","setSelectedIndex","useState","setScrollSnaps","useCallback","scrollTo","onInit","scrollSnapList","onSelect","selectedScrollSnap","useEffect","on","children","restProps","Object","assign","type","sandboxImageList","length","defaultOptions","active","breakpoints","snapped","inView","draggable","dragging","removeClass","node","classList","contains","remove","addClass","add","userOptions","root","selectedEvents","draggingEvents","inViewEvents","toggleDraggingClass","evt","toggleSlideClasses","slideIndexes","slideNodeList","containerNode","querySelectorAll","nodeList","Array","from","forEach","slide","toggleSnappedClasses","slideRegistry","internalEngine","toggleInViewClasses","slidesInView","name","init","emblaApiInstance","optionsHandler","mergeOptions","optionsAtMedia","optionsBase","globalOptions","allOptions","rootNode","slideNodes","watchDrag","destroy","off","undefined"],"sourceRoot":""}