"use strict";(self.webpackChunkembla_carousel_docs=self.webpackChunkembla_carousel_docs||[]).push([[4265],{4265:function(a,n,l){l.r(n),n.default="import { useCallback, useEffect, useState } from 'react'\nimport { EmblaCarouselType } from 'embla-carousel'\n\ntype UseAutoplayType = {\n  autoplayIsPlaying: boolean\n  toggleAutoplay: () => void\n  onAutoplayButtonClick: (callback: () => void) => void\n}\n\nexport const useAutoplay = (\n  emblaApi: EmblaCarouselType | undefined\n): UseAutoplayType => {\n  const [autoplayIsPlaying, setAutoplayIsPlaying] = useState(false)\n\n  const onAutoplayButtonClick = useCallback(\n    (callback: () => void) => {\n      const autoplay = emblaApi?.plugins()?.autoplay\n      if (!autoplay) return\n\n      const resetOrStop =\n        autoplay.options.stopOnInteraction === false\n          ? autoplay.reset\n          : autoplay.stop\n\n      resetOrStop()\n      callback()\n    },\n    [emblaApi]\n  )\n\n  const toggleAutoplay = useCallback(() => {\n    const autoplay = emblaApi?.plugins()?.autoplay\n    if (!autoplay) return\n\n    const playOrStop = autoplay.isPlaying() ? autoplay.stop : autoplay.play\n    playOrStop()\n  }, [emblaApi])\n\n  useEffect(() => {\n    const autoplay = emblaApi?.plugins()?.autoplay\n    if (!autoplay) return\n\n    setAutoplayIsPlaying(autoplay.isPlaying())\n    emblaApi\n      .on('autoplay:play', () => setAutoplayIsPlaying(true))\n      .on('autoplay:stop', () => setAutoplayIsPlaying(false))\n      .on('reInit', () => setAutoplayIsPlaying(autoplay.isPlaying()))\n  }, [emblaApi])\n\n  return {\n    autoplayIsPlaying,\n    toggleAutoplay,\n    onAutoplayButtonClick\n  }\n}\n"}}]);
//# sourceMappingURL=4265-9c884471053e1758f97f.js.map