{"version":3,"file":"5029-43536dd79bdd7f1601d9.js","mappings":"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","sources":["webpack://embla-carousel-docs/./src/components/Sandbox/React/SandboxFilesSrc/EmblaCarouselDotButton.tsx","webpack://embla-carousel-docs/../src/components/utils.ts","webpack://embla-carousel-docs/../src/components/Fade.ts","webpack://embla-carousel-docs/./src/components/Sandbox/React/SandboxFilesSrc/Fade/EmblaCarousel.tsx","webpack://embla-carousel-docs/./src/components/Sandbox/sandboxImages.ts","webpack://embla-carousel-docs/./src/assets/images/slide-1.jpg","webpack://embla-carousel-docs/./src/assets/images/slide-2.jpg","webpack://embla-carousel-docs/./src/assets/images/slide-3.jpg","webpack://embla-carousel-docs/./src/assets/images/slide-4.jpg","webpack://embla-carousel-docs/./src/assets/images/slide-5.jpg"],"sourcesContent":["import React, {\n  ComponentPropsWithRef,\n  useCallback,\n  useEffect,\n  useState\n} from 'react'\nimport { EmblaCarouselType } from 'embla-carousel'\n\ntype UseDotButtonType = {\n  selectedIndex: number\n  scrollSnaps: number[]\n  onDotButtonClick: (index: number) => void\n}\n\nexport const useDotButton = (\n  emblaApi: EmblaCarouselType | undefined,\n  onButtonClick?: (emblaApi: EmblaCarouselType) => void\n): UseDotButtonType => {\n  const [selectedIndex, setSelectedIndex] = useState(0)\n  const [scrollSnaps, setScrollSnaps] = useState<number[]>([])\n\n  const onDotButtonClick = useCallback(\n    (index: number) => {\n      if (!emblaApi) return\n      emblaApi.scrollTo(index)\n      if (onButtonClick) onButtonClick(emblaApi)\n    },\n    [emblaApi, onButtonClick]\n  )\n\n  const onInit = useCallback((emblaApi: EmblaCarouselType) => {\n    setScrollSnaps(emblaApi.scrollSnapList())\n  }, [])\n\n  const onSelect = useCallback((emblaApi: EmblaCarouselType) => {\n    setSelectedIndex(emblaApi.selectedScrollSnap())\n  }, [])\n\n  useEffect(() => {\n    if (!emblaApi) return\n\n    onInit(emblaApi)\n    onSelect(emblaApi)\n\n    emblaApi.on('reInit', onInit).on('reInit', onSelect).on('select', onSelect)\n  }, [emblaApi, onInit, onSelect])\n\n  return {\n    selectedIndex,\n    scrollSnaps,\n    onDotButtonClick\n  }\n}\n\ntype PropType = ComponentPropsWithRef<'button'>\n\nexport const DotButton: React.FC<PropType> = (props) => {\n  const { children, ...restProps } = props\n\n  return (\n    <button type=\"button\" {...restProps}>\n      {children}\n    </button>\n  )\n}\n","export function clampNumber(number: number, min: number, max: number): number {\n  return Math.min(Math.max(number, min), max)\n}\n\nexport function isNumber(value: number | null): value is number {\n  return typeof value === 'number' && !isNaN(value)\n}\n","import { OptionsType } from './Options'\nimport { isNumber, clampNumber } from './utils'\nimport {\n  CreatePluginType,\n  EmblaCarouselType,\n  ScrollBodyType\n} from 'embla-carousel'\n\ndeclare module 'embla-carousel' {\n  interface EmblaPluginsType {\n    fade: FadeType\n  }\n}\n\nexport type FadeType = CreatePluginType<{}, OptionsType>\n\nexport type FadeOptionsType = FadeType['options']\n\nfunction Fade(userOptions: FadeOptionsType = {}): FadeType {\n  const fullOpacity = 1\n  const noOpacity = 0\n  const fadeFriction = 0.68\n  const timeStep = 1000 / 60\n\n  let emblaApi: EmblaCarouselType\n  let opacities: number[] = []\n  let fadeToNextDistance: number\n  let distanceFromPointerDown = 0\n  let fadeVelocity = 0\n  let progress = 0\n  let shouldFadePair = false\n\n  let defaultSettledBehaviour: ScrollBodyType['settled']\n  let defaultProgressBehaviour: EmblaCarouselType['scrollProgress']\n\n  function init(emblaApiInstance: EmblaCarouselType): void {\n    emblaApi = emblaApiInstance\n\n    const selectedSnap = emblaApi.selectedScrollSnap()\n    const { scrollBody, containerRect, axis } = emblaApi.internalEngine()\n    const containerSize = axis.measureSize(containerRect)\n\n    fadeToNextDistance = clampNumber(containerSize * 0.75, 200, 500)\n    shouldFadePair = false\n\n    opacities = emblaApi\n      .scrollSnapList()\n      .map((_, index) => (index === selectedSnap ? fullOpacity : noOpacity))\n\n    defaultSettledBehaviour = scrollBody.settled\n    defaultProgressBehaviour = emblaApi.scrollProgress\n\n    scrollBody.settled = settled\n    emblaApi.scrollProgress = scrollProgress\n\n    emblaApi\n      .on('select', select)\n      .on('slideFocus', fadeToSelectedSnapInstantly)\n      .on('pointerDown', pointerDown)\n      .on('pointerUp', pointerUp)\n\n    disableScroll()\n    fadeToSelectedSnapInstantly()\n  }\n\n  function destroy(): void {\n    const { scrollBody } = emblaApi.internalEngine()\n    scrollBody.settled = defaultSettledBehaviour\n    emblaApi.scrollProgress = defaultProgressBehaviour\n\n    emblaApi\n      .off('select', select)\n      .off('slideFocus', fadeToSelectedSnapInstantly)\n      .off('pointerDown', pointerDown)\n      .off('pointerUp', pointerUp)\n\n    emblaApi.slideNodes().forEach((slideNode) => {\n      const slideStyle = slideNode.style\n      slideStyle.opacity = ''\n      slideStyle.transform = ''\n      slideStyle.pointerEvents = ''\n      if (!slideNode.getAttribute('style')) slideNode.removeAttribute('style')\n    })\n  }\n\n  function fadeToSelectedSnapInstantly(): void {\n    const selectedSnap = emblaApi.selectedScrollSnap()\n    setOpacities(selectedSnap, fullOpacity)\n  }\n\n  function pointerUp(): void {\n    shouldFadePair = false\n  }\n\n  function pointerDown(): void {\n    shouldFadePair = false\n    distanceFromPointerDown = 0\n    fadeVelocity = 0\n  }\n\n  function select(): void {\n    const duration = emblaApi.internalEngine().scrollBody.duration()\n    fadeVelocity = duration ? 0 : fullOpacity\n    shouldFadePair = true\n    if (!duration) fadeToSelectedSnapInstantly()\n  }\n\n  function getSlideTransform(position: number): string {\n    const { axis } = emblaApi.internalEngine()\n    const translateAxis = axis.scroll.toUpperCase()\n    return `translate${translateAxis}(${axis.direction(position)}px)`\n  }\n\n  function disableScroll(): void {\n    const { translate, slideLooper } = emblaApi.internalEngine()\n\n    translate.clear()\n    translate.toggleActive(false)\n\n    slideLooper.loopPoints.forEach(({ translate }) => {\n      translate.clear()\n      translate.toggleActive(false)\n    })\n  }\n\n  function lockExcessiveScroll(fadeIndex: number | null): void {\n    const { scrollSnaps, location, target } = emblaApi.internalEngine()\n    if (!isNumber(fadeIndex) || opacities[fadeIndex] < 0.5) return\n\n    location.set(scrollSnaps[fadeIndex])\n    target.set(location)\n  }\n\n  function setOpacities(fadeIndex: number, velocity: number): void {\n    const scrollSnaps = emblaApi.scrollSnapList()\n\n    scrollSnaps.forEach((_, indexA) => {\n      const absVelocity = Math.abs(velocity)\n      const currentOpacity = opacities[indexA]\n      const isFadeIndex = indexA === fadeIndex\n\n      const nextOpacity = isFadeIndex\n        ? currentOpacity + absVelocity\n        : currentOpacity - absVelocity\n\n      const clampedOpacity = clampNumber(nextOpacity, noOpacity, fullOpacity)\n      opacities[indexA] = clampedOpacity\n\n      const fadePair = isFadeIndex && shouldFadePair\n      const indexB = emblaApi.previousScrollSnap()\n\n      if (fadePair) opacities[indexB] = 1 - clampedOpacity\n      if (isFadeIndex) setProgress(fadeIndex, clampedOpacity)\n\n      setOpacity(indexA)\n    })\n  }\n\n  function setOpacity(index: number): void {\n    const slidesInSnap = emblaApi.internalEngine().slideRegistry[index]\n    const { scrollSnaps, containerRect } = emblaApi.internalEngine()\n    const opacity = opacities[index]\n\n    slidesInSnap.forEach((slideIndex) => {\n      const slideStyle = emblaApi.slideNodes()[slideIndex].style\n      const roundedOpacity = parseFloat(opacity.toFixed(2))\n      const hasOpacity = roundedOpacity > noOpacity\n      const position = hasOpacity ? scrollSnaps[index] : containerRect.width + 2\n      const transform = getSlideTransform(position)\n\n      if (hasOpacity) slideStyle.transform = transform\n\n      slideStyle.opacity = roundedOpacity.toString()\n      slideStyle.pointerEvents = opacity > 0.5 ? 'auto' : 'none'\n\n      if (!hasOpacity) slideStyle.transform = transform\n    })\n  }\n\n  function setProgress(fadeIndex: number, opacity: number): void {\n    const { index, dragHandler, scrollSnaps } = emblaApi.internalEngine()\n    const pointerDown = dragHandler.pointerDown()\n    const snapFraction = 1 / (scrollSnaps.length - 1)\n\n    let indexA = fadeIndex\n    let indexB = pointerDown\n      ? emblaApi.selectedScrollSnap()\n      : emblaApi.previousScrollSnap()\n\n    if (pointerDown && indexA === indexB) {\n      const reverseSign = Math.sign(distanceFromPointerDown) * -1\n      indexA = indexB\n      indexB = index.clone().set(indexB).add(reverseSign).get()\n    }\n\n    const currentPosition = indexB * snapFraction\n    const diffPosition = (indexA - indexB) * snapFraction\n    progress = currentPosition + diffPosition * opacity\n  }\n\n  function getFadeIndex(): number | null {\n    const { dragHandler, index, scrollBody } = emblaApi.internalEngine()\n    const selectedSnap = emblaApi.selectedScrollSnap()\n\n    if (!dragHandler.pointerDown()) return selectedSnap\n\n    const directionSign = Math.sign(scrollBody.velocity())\n    const distanceSign = Math.sign(distanceFromPointerDown)\n    const nextSnap = index\n      .clone()\n      .set(selectedSnap)\n      .add(directionSign * -1)\n      .get()\n\n    if (!directionSign || !distanceSign) return null\n    return distanceSign === directionSign ? nextSnap : selectedSnap\n  }\n\n  function fade(emblaApi: EmblaCarouselType): void {\n    const { dragHandler, scrollBody } = emblaApi.internalEngine()\n    const fixedDeltaTimeSeconds = timeStep / 1000\n    const pointerDown = dragHandler.pointerDown()\n    const velocity = scrollBody.velocity() * fixedDeltaTimeSeconds\n    const duration = scrollBody.duration()\n    const fadeIndex = getFadeIndex()\n    const noFadeIndex = !isNumber(fadeIndex)\n\n    if (pointerDown) {\n      if (!velocity) return\n\n      distanceFromPointerDown += velocity\n      fadeVelocity = Math.abs(velocity / fadeToNextDistance)\n      lockExcessiveScroll(fadeIndex)\n    }\n\n    if (!pointerDown) {\n      if (!duration || noFadeIndex) return\n\n      fadeVelocity += (fullOpacity - opacities[fadeIndex]) / duration\n      fadeVelocity *= fadeFriction\n    }\n\n    if (noFadeIndex) return\n    setOpacities(fadeIndex, fadeVelocity)\n  }\n\n  function settled(): boolean {\n    const { target, location } = emblaApi.internalEngine()\n    const diffToTarget = target.get() - location.get()\n    const notReachedTarget = Math.abs(diffToTarget) >= 1\n    const fadeIndex = getFadeIndex()\n    const noFadeIndex = !isNumber(fadeIndex)\n\n    fade(emblaApi)\n\n    if (noFadeIndex || notReachedTarget) return false\n    return opacities[fadeIndex] > 0.999\n  }\n\n  function scrollProgress(): number {\n    return progress\n  }\n\n  const self: FadeType = {\n    name: 'fade',\n    options: userOptions,\n    init,\n    destroy\n  }\n  return self\n}\n\ndeclare namespace Fade {\n  let globalOptions: FadeOptionsType | undefined\n}\n\nFade.globalOptions = undefined\n\nexport default Fade\n","import React from 'react'\nimport { EmblaOptionsType } from 'embla-carousel'\nimport useEmblaCarousel from 'embla-carousel-react'\nimport Fade from 'embla-carousel-fade'\nimport {\n  NextButton,\n  PrevButton,\n  usePrevNextButtons\n} from '../EmblaCarouselArrowButtons'\nimport { DotButton, useDotButton } from '../EmblaCarouselDotButton'\nimport { sandboxImages } from 'components/Sandbox/sandboxImages'\n\ntype PropType = {\n  slides: number[]\n  options?: EmblaOptionsType\n}\n\nconst EmblaCarousel: React.FC<PropType> = (props) => {\n  const { slides, options } = props\n  const [emblaRef, emblaApi] = useEmblaCarousel(options, [Fade()])\n\n  const { selectedIndex, scrollSnaps, onDotButtonClick } =\n    useDotButton(emblaApi)\n\n  const {\n    prevBtnDisabled,\n    nextBtnDisabled,\n    onPrevButtonClick,\n    onNextButtonClick\n  } = usePrevNextButtons(emblaApi)\n\n  return (\n    <div className=\"embla\">\n      <div className=\"embla__viewport\" ref={emblaRef}>\n        <div className=\"embla__container\">\n          {slides.map((index) => (\n            <div className=\"embla__slide\" key={index}>\n              <img\n                className=\"embla__slide__img\"\n                src={sandboxImages(index)}\n                alt=\"Your alt text\"\n              />\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <div className=\"embla__controls\">\n        <div className=\"embla__buttons\">\n          <PrevButton onClick={onPrevButtonClick} disabled={prevBtnDisabled} />\n          <NextButton onClick={onNextButtonClick} disabled={nextBtnDisabled} />\n        </div>\n\n        <div className=\"embla__dots\">\n          {scrollSnaps.map((_, index) => (\n            <DotButton\n              key={index}\n              onClick={() => onDotButtonClick(index)}\n              className={'embla__dot'.concat(\n                index === selectedIndex ? ' embla__dot--selected' : ''\n              )}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default EmblaCarousel\n","import image1 from 'assets/images/slide-1.jpg'\nimport image2 from 'assets/images/slide-2.jpg'\nimport image3 from 'assets/images/slide-3.jpg'\nimport image4 from 'assets/images/slide-4.jpg'\nimport image5 from 'assets/images/slide-5.jpg'\n\nconst sandboxImageList: string[] = [image1, image2, image3, image4, image5]\n\nexport const sandboxImages = (index: number): string =>\n  sandboxImageList[index % sandboxImageList.length]\n","export default __webpack_public_path__ + \"static/slide-1-47ed6052f4455272d8f76db16447d760.jpg\";","export default __webpack_public_path__ + \"static/slide-2-dc15cfe63eb4aeb8c9c09823179ee64c.jpg\";","export default __webpack_public_path__ + \"static/slide-3-6362505742d23d7cd240880140151a95.jpg\";","export default __webpack_public_path__ + \"static/slide-4-ebad84cfea5ff9481504ded363c22003.jpg\";","export default __webpack_public_path__ + \"static/slide-5-2d88e98502aa565d6269834d7a7be406.jpg\";"],"names":["useDotButton","emblaApi","onButtonClick","selectedIndex","setSelectedIndex","useState","scrollSnaps","setScrollSnaps","onDotButtonClick","useCallback","index","scrollTo","onInit","scrollSnapList","onSelect","selectedScrollSnap","useEffect","on","DotButton","props","children","restProps","React","Object","assign","type","clampNumber","number","min","max","Math","isNumber","value","isNaN","Fade","userOptions","fullOpacity","noOpacity","fadeFriction","timeStep","fadeToNextDistance","defaultSettledBehaviour","defaultProgressBehaviour","opacities","distanceFromPointerDown","fadeVelocity","progress","shouldFadePair","fadeToSelectedSnapInstantly","setOpacities","pointerUp","pointerDown","select","duration","internalEngine","scrollBody","lockExcessiveScroll","fadeIndex","location","target","set","velocity","forEach","_","indexA","absVelocity","abs","currentOpacity","isFadeIndex","clampedOpacity","fadePair","indexB","previousScrollSnap","opacity","dragHandler","snapFraction","length","reverseSign","sign","clone","add","get","currentPosition","diffPosition","setProgress","slidesInSnap","slideRegistry","containerRect","slideIndex","slideStyle","slideNodes","style","roundedOpacity","parseFloat","toFixed","hasOpacity","transform","position","axis","scroll","toUpperCase","direction","getSlideTransform","width","toString","pointerEvents","setOpacity","getFadeIndex","selectedSnap","directionSign","distanceSign","nextSnap","settled","diffToTarget","notReachedTarget","noFadeIndex","fixedDeltaTimeSeconds","fade","scrollProgress","name","options","init","emblaApiInstance","containerSize","measureSize","map","translate","slideLooper","clear","toggleActive","loopPoints","_ref","disableScroll","destroy","off","slideNode","getAttribute","removeAttribute","globalOptions","undefined","slides","emblaRef","useEmblaCarousel","prevBtnDisabled","nextBtnDisabled","onPrevButtonClick","onNextButtonClick","usePrevNextButtons","className","ref","key","src","sandboxImages","alt","PrevButton","onClick","disabled","NextButton","concat","sandboxImageList"],"sourceRoot":""}