{"version":3,"file":"6445-cac03c60bbec1a06dc44.js","mappings":"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","sources":["webpack://embla-carousel-docs/./src/components/Input/InputRadio.tsx","webpack://embla-carousel-docs/./src/components/Input/createRadioOrCheckboxCard.tsx","webpack://embla-carousel-docs/./src/components/Input/createRadioOrCheckboxDefault.tsx","webpack://embla-carousel-docs/./src/components/Sandbox/SandboxSelectionInput.tsx","webpack://embla-carousel-docs/./src/components/Sandbox/SandboxSelectionForm.tsx","webpack://embla-carousel-docs/./src/components/Modal/ModalPortal.tsx","webpack://embla-carousel-docs/./src/components/Sandbox/SandboxSelectionModal.tsx"],"sourcesContent":["import { createRadioOrCheckboxDefault } from './createRadioOrCheckboxDefault'\nimport { createRadioOrCheckboxCard } from './createRadioOrCheckboxCard'\n\nexport const InputRadioDefault = createRadioOrCheckboxDefault('radio')\n\nexport const InputRadioCard = createRadioOrCheckboxCard('radio')\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useAppSelector } from 'hooks/useRedux'\nimport { selectKeyNavigating } from 'components/KeyEvents/keyEventsReducer'\nimport { CARD_STYLES } from 'consts/card'\nimport { createSquareSizeStyles } from 'utils/createSquareSizeStyles'\nimport { kebabCaseToPascalCase } from 'utils/stringCasing'\nimport { PropType } from './createRadioOrCheckboxDefault'\nimport { BRAND_GRADIENT_BACKGROUND_STYLES } from 'consts/gradients'\nimport { BORDER_RADIUSES, BORDER_SIZES } from 'consts/border'\nimport { TAP_HIGHLIGHT_STYLES } from 'consts/tapHighlight'\nimport { LAYERS } from 'consts/layers'\nimport { COLORS } from 'consts/themes'\nimport { KEY_NAVIGATING_STYLES } from 'consts/keyEvents'\n\nconst RadioOrCheckboxCardWrapper = styled.label`\n  ${TAP_HIGHLIGHT_STYLES};\n  ${CARD_STYLES};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n  height: 100%;\n`\n\nconst LabelContent = styled.span`\n  z-index: ${LAYERS.STEP};\n  position: relative;\n  display: block;\n  width: 100%;\n  cursor: pointer;\n`\n\nconst Highlight = styled.span`\n  ${BRAND_GRADIENT_BACKGROUND_STYLES};\n  top: -${BORDER_SIZES.DETAIL};\n  left: -${BORDER_SIZES.DETAIL};\n  bottom: -${BORDER_SIZES.DETAIL};\n  right: -${BORDER_SIZES.DETAIL};\n  display: block;\n  position: absolute;\n  border-radius: inherit;\n  pointer-events: none;\n  visibility: hidden;\n\n  &:after {\n    background-color: ${COLORS.BACKGROUND_CODE};\n    border-radius: inherit;\n    position: absolute;\n    top: ${BORDER_SIZES.OUTLINE};\n    left: ${BORDER_SIZES.OUTLINE};\n    bottom: ${BORDER_SIZES.OUTLINE};\n    right: ${BORDER_SIZES.OUTLINE};\n    content: '';\n  }\n`\n\nconst Input = styled.input<{ $isKeyNavigating: boolean }>`\n  ${TAP_HIGHLIGHT_STYLES};\n  ${KEY_NAVIGATING_STYLES};\n  position: absolute;\n  border-radius: ${BORDER_RADIUSES.CARD};\n  top: 0;\n  left: 0;\n  ${createSquareSizeStyles('100%')};\n  appearance: none;\n  -webkit-appearance: none;\n  border: 0;\n  background-color: transparent;\n  pointer-events: none;\n\n  &:after {\n    display: block;\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    ${createSquareSizeStyles('100%')};\n  }\n\n  &:checked + ${Highlight} {\n    visibility: visible;\n  }\n\n  &[disabled] + ${Highlight} + ${LabelContent} {\n    cursor: not-allowed;\n  }\n\n  &[disabled]:checked + ${Highlight} {\n    background-image: none;\n    background-color: ${COLORS.DETAIL_HIGH_CONTRAST};\n  }\n`\n\nexport const createRadioOrCheckboxCard = (\n  type: 'radio' | 'checkbox'\n): ((props: PropType) => JSX.Element) => {\n  const displayName = kebabCaseToPascalCase(`input-${type}-card`)\n\n  const InputSelectionComponent = (props: PropType) => {\n    const { children, ...restProps } = props\n    const isKeyNavigating = useAppSelector(selectKeyNavigating)\n\n    return (\n      <RadioOrCheckboxCardWrapper htmlFor={restProps.id}>\n        <Input type={type} $isKeyNavigating={isKeyNavigating} {...restProps} />\n        <Highlight />\n        <LabelContent>{children}</LabelContent>\n      </RadioOrCheckboxCardWrapper>\n    )\n  }\n\n  InputSelectionComponent.displayName = displayName\n  return InputSelectionComponent\n}\n","import React, { ComponentPropsWithRef } from 'react'\nimport styled, { css } from 'styled-components'\nimport { useAppSelector } from 'hooks/useRedux'\nimport { selectKeyNavigating } from 'components/KeyEvents/keyEventsReducer'\nimport { COLORS } from 'consts/themes'\nimport { SPACINGS } from 'consts/spacings'\nimport { createSquareSizeStyles } from 'utils/createSquareSizeStyles'\nimport { BORDER_RADIUSES } from 'consts/border'\nimport { BRAND_GRADIENT_BACKGROUND_STYLES } from 'consts/gradients'\nimport { kebabCaseToPascalCase } from 'utils/stringCasing'\nimport { TAP_HIGHLIGHT_STYLES } from 'consts/tapHighlight'\nimport { KEY_NAVIGATING_STYLES } from 'consts/keyEvents'\n\nconst INPUT_SIZE = '2.5rem'\nconst CHECK_SIZE = '1.2rem'\n\nconst RadioOrCheckboxDefaultWrapper = styled.span`\n  display: flex;\n  align-items: flex-start;\n  flex-wrap: wrap;\n`\n\nconst InputWrapper = styled.span`\n  flex: 0 0 ${INPUT_SIZE};\n  position: relative;\n  min-width: 0;\n`\n\nconst InputLineHeight = styled.span`\n  color: ${COLORS.BACKGROUND_SITE};\n  width: ${INPUT_SIZE};\n  display: inline-block;\n  line-height: inherit;\n`\n\nconst Input = styled.input<{ $isKeyNavigating: boolean }>`\n  ${createSquareSizeStyles(INPUT_SIZE)};\n  ${TAP_HIGHLIGHT_STYLES};\n  ${KEY_NAVIGATING_STYLES};\n  appearance: none;\n  -webkit-appearance: none;\n  position: absolute;\n  top: 50%;\n  left: 0;\n  top: 50%;\n  transform: translateY(-50%);\n  background-color: ${COLORS.DETAIL_MEDIUM_CONTRAST};\n  cursor: pointer;\n\n  &:before,\n  &:after {\n    display: block;\n    content: '';\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n  }\n\n  &:before {\n    ${createSquareSizeStyles('2rem')};\n    background-color: ${COLORS.BACKGROUND_CODE};\n  }\n\n  &:after {\n    ${createSquareSizeStyles(CHECK_SIZE)};\n  }\n\n  &:checked {\n    &:after {\n      ${BRAND_GRADIENT_BACKGROUND_STYLES};\n    }\n  }\n\n  &[disabled] {\n    cursor: not-allowed;\n  }\n\n  &[disabled]:checked {\n    &:after {\n      background-image: none;\n      background-color: ${COLORS.DETAIL_HIGH_CONTRAST};\n    }\n  }\n`\n\nconst InputRadio = styled(Input)`\n  border-radius: ${BORDER_RADIUSES.CIRCLE};\n\n  &:before {\n    border-radius: ${BORDER_RADIUSES.CIRCLE};\n  }\n  &:after {\n    border-radius: ${BORDER_RADIUSES.CIRCLE};\n  }\n`\n\nconst InputCheckbox = styled(Input)`\n  border-radius: ${BORDER_RADIUSES.LINE};\n\n  &:before {\n    border-radius: ${BORDER_RADIUSES.LINE};\n  }\n\n  &:after {\n    border-radius: 0;\n  }\n`\n\nconst Label = styled.label<{ $disabled?: boolean }>`\n  ${TAP_HIGHLIGHT_STYLES};\n  padding-left: ${SPACINGS.TWO};\n  min-width: 0;\n  flex: 0 0 calc(100% - ${INPUT_SIZE});\n\n  ${({ $disabled }) =>\n    $disabled &&\n    css`\n      color: ${COLORS.TEXT_LOW_CONTRAST};\n    `};\n`\n\nexport type PropType = ComponentPropsWithRef<'input'>\n\nexport const createRadioOrCheckboxDefault = (\n  type: 'radio' | 'checkbox'\n): ((props: PropType) => JSX.Element) => {\n  const InputComponent = type === 'radio' ? InputRadio : InputCheckbox\n  const displayName = kebabCaseToPascalCase(`input-${type}-default`)\n\n  const InputSelectionComponent = (props: PropType) => {\n    const { children, ...restProps } = props\n    const isKeyNavigating = useAppSelector(selectKeyNavigating)\n\n    return (\n      <RadioOrCheckboxDefaultWrapper>\n        <InputWrapper>\n          <InputLineHeight>-</InputLineHeight>\n          <InputComponent\n            type={type}\n            $isKeyNavigating={isKeyNavigating}\n            {...restProps}\n          />\n        </InputWrapper>\n        <Label htmlFor={restProps.id} $disabled={restProps.disabled}>\n          {children}\n        </Label>\n      </RadioOrCheckboxDefaultWrapper>\n    )\n  }\n\n  InputSelectionComponent.displayName = displayName\n  return InputSelectionComponent\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Icon } from 'components/Icon/Icon'\nimport { InputRadioCard } from 'components/Input/InputRadio'\nimport { FONT_SIZES, FONT_WEIGHTS } from 'consts/fontSizes'\nimport { SPACINGS } from 'consts/spacings'\nimport { createSquareSizeStyles } from 'utils/createSquareSizeStyles'\nimport { PropType as RadioOrCheckboxPropType } from 'components/Input/createRadioOrCheckboxDefault'\nimport { SandboxLabelKeyType } from 'consts/sandbox'\nimport { IconType } from 'assets/icons'\n\nconst ICONS_BY_LABEL: {\n  [key in SandboxLabelKeyType]: Extract<\n    IconType,\n    'javascript' | 'typescript' | 'react'\n  >\n} = {\n  VANILLA_JS: 'javascript',\n  VANILLA_TS: 'typescript',\n  REACT_JS: 'react',\n  REACT_TS: 'react'\n}\n\nconst RadioLabelContent = styled.span`\n  display: flex;\n  flex-direction: column;\n  padding: ${SPACINGS.TWO};\n  line-height: 1;\n  text-align: center;\n  align-items: center;\n  font-size: ${FONT_SIZES.DETAIL};\n  font-weight: ${FONT_WEIGHTS.MEDIUM};\n`\n\nconst RadioLabelSvg = styled(Icon)`\n  ${createSquareSizeStyles('3rem')};\n  margin-bottom: ${SPACINGS.TWO};\n`\n\ntype PropType = RadioOrCheckboxPropType & {\n  framework: SandboxLabelKeyType\n}\n\nexport const SandboxSelectionInput = (props: PropType) => {\n  const { children, framework, ...restProps } = props\n\n  return (\n    <InputRadioCard {...restProps}>\n      <RadioLabelContent>\n        <RadioLabelSvg svg={ICONS_BY_LABEL[framework]} />\n        {children}\n      </RadioLabelContent>\n    </InputRadioCard>\n  )\n}\n","import React, { useCallback, useState } from 'react'\nimport styled from 'styled-components'\nimport { SPACINGS } from 'consts/spacings'\nimport { URLS } from 'consts/urls'\nimport { FONT_SIZES, FONT_WEIGHTS } from 'consts/fontSizes'\nimport { useEffect } from 'react'\nimport { ButtonPrimaryFilledWithLoading } from 'components/Button/ButtonPrimaryFilled'\nimport { createGapStyles } from 'utils/createGapStyles'\nimport { PropType } from 'components/Sandbox/SandboxSelection'\nimport { SandboxLabelKeyType, SANDBOX_SELECTION_SPACING } from 'consts/sandbox'\nimport { snakeCaseToKebabCase } from 'utils/stringCasing'\nimport { SandboxSelectionInput } from './SandboxSelectionInput'\n\nconst INPUT_RADIO_GROUP_NAME = 'choose-sandbox'\n\nconst SandboxSelectionFormWrapper = styled.form`\n  display: flex;\n  flex-direction: column;\n`\n\nconst Fieldset = styled.div`\n  padding-bottom: ${SPACINGS.FIVE};\n`\n\nconst Legend = styled.h3`\n  margin-bottom: ${SPACINGS.FOUR};\n  font-size: ${FONT_SIZES.H3};\n\n  width: 100%;\n  font-weight: ${FONT_WEIGHTS.BOLD};\n  line-height: 1.5;\n`\n\nconst SandboxSelectionList = styled.ul`\n  ${createGapStyles(\n    SANDBOX_SELECTION_SPACING,\n    SANDBOX_SELECTION_SPACING,\n    'li'\n  )};\n  display: flex;\n  flex-wrap: wrap;\n`\n\nconst SandboxSelection = styled.li`\n  position: relative;\n  flex: 0 0 50%;\n  min-width: 0;\n`\n\nexport const SandboxSelectionForm = (props: PropType) => {\n  const { sandboxes = [] } = props\n  const [sandboxKey, setSandboxKey] = useState<SandboxLabelKeyType | ''>('')\n  const [sandbox, setSandbox] = useState('')\n  const isLoading = !!(sandboxKey && !sandbox)\n\n  const loadSandbox = useCallback(\n    async (key: SandboxLabelKeyType) => {\n      const sandbox = sandboxes.find((sandbox) => sandbox.key === key)\n      if (sandbox) setSandbox(await sandbox.createSandbox())\n    },\n    [sandboxes]\n  )\n\n  const onChange = useCallback((event: React.FormEvent<HTMLInputElement>) => {\n    const key = event.currentTarget.value as SandboxLabelKeyType\n    setSandbox('')\n    setSandboxKey(key)\n  }, [])\n\n  useEffect(() => {\n    if (sandboxKey) loadSandbox(sandboxKey)\n  }, [sandboxKey])\n\n  return (\n    <SandboxSelectionFormWrapper\n      action={URLS.CODESANDBOX_DEFINE}\n      method=\"POST\"\n      target=\"_blank\"\n    >\n      <Fieldset role=\"radiogroup\" aria-label={INPUT_RADIO_GROUP_NAME}>\n        <Legend>Select CodeSandbox</Legend>\n\n        <SandboxSelectionList>\n          {sandboxes.map((sandbox) => (\n            <SandboxSelection key={sandbox.key}>\n              <SandboxSelectionInput\n                framework={sandbox.key}\n                name={INPUT_RADIO_GROUP_NAME}\n                id={`${INPUT_RADIO_GROUP_NAME}-${snakeCaseToKebabCase(\n                  sandbox.key\n                )}`}\n                value={sandbox.key}\n                onChange={onChange}\n                checked={sandboxKey === sandbox.key}\n              >\n                {sandbox.label}\n              </SandboxSelectionInput>\n            </SandboxSelection>\n          ))}\n        </SandboxSelectionList>\n      </Fieldset>\n\n      <input type=\"hidden\" name=\"parameters\" value={sandbox} />\n\n      <ButtonPrimaryFilledWithLoading\n        isLoading={isLoading}\n        disabled={!sandbox}\n        type=\"submit\"\n      >\n        Create Sandbox\n      </ButtonPrimaryFilledWithLoading>\n    </SandboxSelectionFormWrapper>\n  )\n}\n","import { useEffect, PropsWithChildren, useRef } from 'react'\nimport { createPortal } from 'react-dom'\nimport { isBrowser } from 'utils/isBrowser'\n\nconst getExistingOrCreatePortalWrapper = (): HTMLElement | null => {\n  if (!isBrowser) return null\n\n  let wrapper = document.getElementById(PORTAL_ELEMENT_ID)\n  if (wrapper) return wrapper\n\n  wrapper = document.createElement('div')\n  wrapper.id = PORTAL_ELEMENT_ID\n  document.body.appendChild(wrapper)\n  return wrapper\n}\n\nconst PORTAL_ELEMENT_ID = 'portal-root'\n\ntype PropType = PropsWithChildren<{}>\n\nexport const ModalPortal = (props: PropType) => {\n  const { children } = props\n  const portalWrapper = useRef(getExistingOrCreatePortalWrapper())\n  const portalContent = useRef<HTMLDivElement>(\n    isBrowser ? document.createElement('div') : null\n  )\n\n  useEffect(() => {\n    if (!portalWrapper.current || !portalContent.current) return\n\n    portalWrapper.current.appendChild(portalContent.current)\n\n    return () => {\n      if (!portalWrapper.current || !portalContent.current) return\n      portalWrapper.current.removeChild(portalContent.current)\n    }\n  }, [])\n\n  return createPortal(children, portalContent.current as HTMLDivElement)\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport FocusTrap from 'focus-trap-react'\nimport { SandboxSelectionType } from 'consts/sandbox'\nimport { ButtonBare, ButtonBareText } from 'components/Button/ButtonBare'\nimport { COLORS } from 'consts/themes'\nimport { LAYERS } from 'consts/layers'\nimport { SPACINGS } from 'consts/spacings'\nimport { MEDIA } from 'consts/breakpoints'\nimport { PAGE_FRAME_SPACING } from 'components/Page/PageFrame'\nimport { Icon } from 'components/Icon/Icon'\nimport { createSquareSizeStyles } from 'utils/createSquareSizeStyles'\nimport { SandboxSelectionForm } from 'components/Sandbox/SandboxSelectionForm'\nimport { ModalPortal } from 'components/Modal/ModalPortal'\nimport { BORDER_RADIUSES } from 'consts/border'\n\nexport const SELECT_CODESANDBOX_DIALOG_ID = 'select-codesandbox-dialog'\nconst MODAL_MAX_WIDTH = '36rem'\nconst DESKTOP_END_SPACING = SPACINGS.TEN\n\nconst BUTTON_SIZE = '4rem'\nconst ICON_SIZE = '1.8rem'\n\nconst SandboxSelectionModalWrapper = styled.div`\n  z-index: ${LAYERS.SEARCH + LAYERS.STEP};\n  padding: ${PAGE_FRAME_SPACING} 0;\n  background-color: ${COLORS.BACKGROUND_SITE};\n  position: fixed;\n  left: 0;\n  right: 0;\n  top: 0;\n  margin: auto;\n  width: 100%;\n  display: flex;\n  margin: 0 auto;\n  flex-direction: column;\n  height: 100vh;\n  max-width: ${MODAL_MAX_WIDTH};\n\n  ${MEDIA.DESKTOP} {\n    box-shadow: 0 0 0 0.1rem ${COLORS.DETAIL_LOW_CONTRAST};\n    top: ${DESKTOP_END_SPACING};\n    max-height: calc(100vh - ${DESKTOP_END_SPACING} * 2);\n    height: auto;\n    border-radius: ${BORDER_RADIUSES.SOFT};\n  }\n`\n\nconst Overlay = styled.div`\n  z-index: ${LAYERS.SEARCH};\n  position: fixed;\n  top: 0;\n  right: 0;\n  left: 0;\n  bottom: 0;\n  background-color: ${COLORS.BACKGROUND_SITE};\n\n  ${MEDIA.DESKTOP} {\n    opacity: 0.9;\n  }\n`\n\nconst CloseButton = styled(ButtonBare)`\n  ${createSquareSizeStyles(BUTTON_SIZE)};\n  z-index: ${LAYERS.STEP};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: absolute;\n  top: ${PAGE_FRAME_SPACING};\n  right: ${PAGE_FRAME_SPACING};\n  margin-right: calc((${BUTTON_SIZE} - ${ICON_SIZE}) / 2 * -1);\n  margin-top: -${SPACINGS.CUSTOM(() => 0.4)};\n\n  ${ButtonBareText} {\n    display: flex;\n  }\n`\n\nconst ScrollArea = styled.div`\n  padding: 0 ${PAGE_FRAME_SPACING};\n  overflow: auto;\n  position: relative;\n  max-height: 100%;\n`\n\ntype PropType = {\n  sandboxes: SandboxSelectionType[]\n  closeModal: () => void\n}\n\nexport const SandboxSelectionModal = (props: PropType) => {\n  const { sandboxes, closeModal } = props\n\n  return (\n    <ModalPortal>\n      <FocusTrap active={true}>\n        <div>\n          <Overlay onClick={closeModal} />\n\n          <SandboxSelectionModalWrapper\n            role=\"dialog\"\n            aria-modal=\"true\"\n            aria-label=\"Select CodeSandbox Dialog\"\n            aria-labelledby={SELECT_CODESANDBOX_DIALOG_ID}\n          >\n            <CloseButton\n              aria-label=\"Hide Select CodeSandbox Dialog\"\n              onClick={closeModal}\n            >\n              <Icon svg=\"cross\" size={ICON_SIZE} />\n            </CloseButton>\n\n            <ScrollArea>\n              <SandboxSelectionForm sandboxes={sandboxes || []} />\n            </ScrollArea>\n          </SandboxSelectionModalWrapper>\n        </div>\n      </FocusTrap>\n    </ModalPortal>\n  )\n}\n"],"names":["InputRadioDefault","createRadioOrCheckboxDefault","InputRadioCard","createRadioOrCheckboxCard","RadioOrCheckboxCardWrapper","styled","label","withConfig","displayName","componentId","TAP_HIGHLIGHT_STYLES","CARD_STYLES","LabelContent","span","LAYERS","STEP","Highlight","BRAND_GRADIENT_BACKGROUND_STYLES","BORDER_SIZES","DETAIL","COLORS","BACKGROUND_CODE","OUTLINE","Input","input","KEY_NAVIGATING_STYLES","BORDER_RADIUSES","CARD","createSquareSizeStyles","DETAIL_HIGH_CONTRAST","type","kebabCaseToPascalCase","InputSelectionComponent","props","children","restProps","isKeyNavigating","useAppSelector","selectKeyNavigating","React","htmlFor","id","Object","assign","$isKeyNavigating","INPUT_SIZE","RadioOrCheckboxDefaultWrapper","InputWrapper","InputLineHeight","BACKGROUND_SITE","DETAIL_MEDIUM_CONTRAST","InputRadio","CIRCLE","InputCheckbox","LINE","Label","SPACINGS","TWO","_ref","$disabled","css","TEXT_LOW_CONTRAST","InputComponent","disabled","ICONS_BY_LABEL","VANILLA_JS","VANILLA_TS","REACT_JS","REACT_TS","RadioLabelContent","FONT_SIZES","FONT_WEIGHTS","MEDIUM","RadioLabelSvg","Icon","SandboxSelectionInput","framework","svg","INPUT_RADIO_GROUP_NAME","SandboxSelectionFormWrapper","form","Fieldset","div","FIVE","Legend","h3","FOUR","H3","BOLD","SandboxSelectionList","ul","createGapStyles","SANDBOX_SELECTION_SPACING","SandboxSelection","li","SandboxSelectionForm","sandboxes","sandboxKey","setSandboxKey","useState","sandbox","setSandbox","isLoading","loadSandbox","useCallback","async","find","key","createSandbox","onChange","event","currentTarget","value","useEffect","action","URLS","CODESANDBOX_DEFINE","method","target","role","map","name","snakeCaseToKebabCase","checked","ButtonPrimaryFilledWithLoading","PORTAL_ELEMENT_ID","ModalPortal","portalWrapper","useRef","getExistingOrCreatePortalWrapper","isBrowser","wrapper","document","getElementById","createElement","body","appendChild","portalContent","current","removeChild","createPortal","SELECT_CODESANDBOX_DIALOG_ID","DESKTOP_END_SPACING","TEN","BUTTON_SIZE","ICON_SIZE","SandboxSelectionModalWrapper","SEARCH","PAGE_FRAME_SPACING","MEDIA","DESKTOP","DETAIL_LOW_CONTRAST","SOFT","Overlay","CloseButton","ButtonBare","CUSTOM","ButtonBareText","ScrollArea","SandboxSelectionModal","closeModal","FocusTrap","active","onClick","size"],"sourceRoot":""}