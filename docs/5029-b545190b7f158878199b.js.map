{"version":3,"file":"5029-b545190b7f158878199b.js","mappings":"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","sources":["webpack://embla-carousel-docs/./src/components/Sandbox/React/SandboxFilesSrc/EmblaCarouselDotButton.tsx","webpack://embla-carousel-docs/../src/components/utils.ts","webpack://embla-carousel-docs/../src/components/Fade.ts","webpack://embla-carousel-docs/./src/components/Sandbox/React/SandboxFilesSrc/Fade/EmblaCarousel.tsx","webpack://embla-carousel-docs/./src/components/Sandbox/sandboxImages.ts","webpack://embla-carousel-docs/./src/assets/images/slide-1.jpg","webpack://embla-carousel-docs/./src/assets/images/slide-2.jpg","webpack://embla-carousel-docs/./src/assets/images/slide-3.jpg","webpack://embla-carousel-docs/./src/assets/images/slide-4.jpg","webpack://embla-carousel-docs/./src/assets/images/slide-5.jpg"],"sourcesContent":["import React, {\n  PropsWithChildren,\n  useCallback,\n  useEffect,\n  useState\n} from 'react'\nimport { EmblaCarouselType } from 'embla-carousel'\n\ntype UseDotButtonType = {\n  selectedIndex: number\n  scrollSnaps: number[]\n  onDotButtonClick: (index: number) => void\n}\n\nexport const useDotButton = (\n  emblaApi: EmblaCarouselType | undefined,\n  onButtonClick?: (emblaApi: EmblaCarouselType) => void\n): UseDotButtonType => {\n  const [selectedIndex, setSelectedIndex] = useState(0)\n  const [scrollSnaps, setScrollSnaps] = useState<number[]>([])\n\n  const onDotButtonClick = useCallback(\n    (index: number) => {\n      if (!emblaApi) return\n      emblaApi.scrollTo(index)\n      if (onButtonClick) onButtonClick(emblaApi)\n    },\n    [emblaApi, onButtonClick]\n  )\n\n  const onInit = useCallback((emblaApi: EmblaCarouselType) => {\n    setScrollSnaps(emblaApi.scrollSnapList())\n  }, [])\n\n  const onSelect = useCallback((emblaApi: EmblaCarouselType) => {\n    setSelectedIndex(emblaApi.selectedScrollSnap())\n  }, [])\n\n  useEffect(() => {\n    if (!emblaApi) return\n\n    onInit(emblaApi)\n    onSelect(emblaApi)\n\n    emblaApi.on('reInit', onInit).on('reInit', onSelect).on('select', onSelect)\n  }, [emblaApi, onInit, onSelect])\n\n  return {\n    selectedIndex,\n    scrollSnaps,\n    onDotButtonClick\n  }\n}\n\ntype PropType = PropsWithChildren<\n  React.DetailedHTMLProps<\n    React.ButtonHTMLAttributes<HTMLButtonElement>,\n    HTMLButtonElement\n  >\n>\n\nexport const DotButton: React.FC<PropType> = (props) => {\n  const { children, ...restProps } = props\n\n  return (\n    <button type=\"button\" {...restProps}>\n      {children}\n    </button>\n  )\n}\n","export function clampNumber(number: number, min: number, max: number): number {\n  return Math.min(Math.max(number, min), max)\n}\n\nexport function isNumber(value: number | null): value is number {\n  return typeof value === 'number' && !isNaN(value)\n}\n","import { OptionsType } from './Options'\nimport { CreatePluginType } from 'embla-carousel/components/Plugins'\nimport { EmblaCarouselType } from 'embla-carousel'\nimport { isNumber, clampNumber } from './utils'\nimport { ScrollBodyType } from 'embla-carousel/components/ScrollBody'\n\ndeclare module 'embla-carousel/components/Plugins' {\n  interface EmblaPluginsType {\n    fade?: FadeType\n  }\n}\n\nexport type FadeType = CreatePluginType<{}, OptionsType>\n\nexport type FadeOptionsType = FadeType['options']\n\nfunction Fade(userOptions: FadeOptionsType = {}): FadeType {\n  const fullOpacity = 1\n  const noOpacity = 0\n  const fadeFriction = 0.68\n\n  let emblaApi: EmblaCarouselType\n  let opacities: number[] = []\n  let fadeToNextDistance: number\n  let distanceFromPointerDown = 0\n  let fadeVelocity = 0\n  let progress = 0\n  let defaultSettledBehaviour: ScrollBodyType['settled']\n  let defaultProgressBehaviour: EmblaCarouselType['scrollProgress']\n\n  function init(emblaApiInstance: EmblaCarouselType): void {\n    emblaApi = emblaApiInstance\n\n    const selectedSnap = emblaApi.selectedScrollSnap()\n    const { scrollBody, containerRect, axis } = emblaApi.internalEngine()\n    const containerSize = axis.measureSize(containerRect)\n    fadeToNextDistance = clampNumber(containerSize * 0.75, 200, 500)\n\n    opacities = emblaApi\n      .scrollSnapList()\n      .map((_, index) => (index === selectedSnap ? fullOpacity : noOpacity))\n\n    disableScroll()\n    fadeToSelectedSnapInstantly()\n\n    defaultSettledBehaviour = scrollBody.settled\n    defaultProgressBehaviour = emblaApi.scrollProgress\n\n    scrollBody.settled = settled\n    emblaApi.scrollProgress = scrollProgress\n\n    emblaApi\n      .on('select', select)\n      .on('slideFocus', fadeToSelectedSnapInstantly)\n      .on('pointerDown', pointerDown)\n  }\n\n  function destroy(): void {\n    const { scrollBody } = emblaApi.internalEngine()\n    scrollBody.settled = defaultSettledBehaviour\n    emblaApi.scrollProgress = defaultProgressBehaviour\n\n    emblaApi\n      .off('select', select)\n      .off('slideFocus', fadeToSelectedSnapInstantly)\n      .off('pointerDown', pointerDown)\n\n    emblaApi.slideNodes().forEach((slideNode) => {\n      const slideStyle = slideNode.style\n      slideStyle.opacity = ''\n      slideStyle.transform = ''\n      slideStyle.pointerEvents = ''\n      if (!slideNode.getAttribute('style')) slideNode.removeAttribute('style')\n    })\n  }\n\n  function fadeToSelectedSnapInstantly(): void {\n    const selectedSnap = emblaApi.selectedScrollSnap()\n    setOpacities(selectedSnap, fullOpacity)\n  }\n\n  function pointerDown(): void {\n    distanceFromPointerDown = 0\n    fadeVelocity = 0\n  }\n\n  function select(): void {\n    const duration = emblaApi.internalEngine().scrollBody.duration()\n    fadeVelocity = duration ? 0 : fullOpacity\n    if (!duration) fadeToSelectedSnapInstantly()\n  }\n\n  function getSlideTransform(position: number): string {\n    const { axis } = emblaApi.internalEngine()\n    const translateAxis = axis.scroll.toUpperCase()\n    return `translate${translateAxis}(${axis.direction(position)}px)`\n  }\n\n  function disableScroll(): void {\n    const { translate, slideLooper } = emblaApi.internalEngine()\n\n    translate.clear()\n    translate.toggleActive(false)\n\n    slideLooper.loopPoints.forEach(({ translate }) => {\n      translate.clear()\n      translate.toggleActive(false)\n    })\n  }\n\n  function lockExcessiveScroll(fadeIndex: number | null): void {\n    const { scrollSnaps, location, target } = emblaApi.internalEngine()\n    if (!isNumber(fadeIndex) || opacities[fadeIndex] < 0.5) return\n\n    location.set(scrollSnaps[fadeIndex])\n    target.set(location)\n  }\n\n  function setOpacities(fadeIndex: number, velocity: number): void {\n    const scrollSnaps = emblaApi.scrollSnapList()\n\n    scrollSnaps.forEach((_, index) => {\n      const absVelocity = Math.abs(velocity)\n      const currentOpacity = opacities[index]\n      const isFadeIndex = index === fadeIndex\n\n      const nextOpacity = isFadeIndex\n        ? currentOpacity + absVelocity\n        : currentOpacity - absVelocity\n\n      const clampedOpacity = clampNumber(nextOpacity, noOpacity, fullOpacity)\n      opacities[index] = clampedOpacity\n\n      if (isFadeIndex) setProgress(fadeIndex, clampedOpacity)\n      setOpacity(index)\n    })\n  }\n\n  function setOpacity(index: number): void {\n    const slidesInSnap = emblaApi.internalEngine().slideRegistry[index]\n    const { scrollSnaps, containerRect } = emblaApi.internalEngine()\n    const opacity = opacities[index]\n\n    slidesInSnap.forEach((slideIndex) => {\n      const slideStyle = emblaApi.slideNodes()[slideIndex].style\n      const roundedOpacity = parseFloat(opacity.toFixed(2))\n      const hasOpacity = roundedOpacity > noOpacity\n      const position = hasOpacity ? scrollSnaps[index] : containerRect.width + 2\n      const transform = getSlideTransform(position)\n\n      if (hasOpacity) slideStyle.transform = transform\n\n      slideStyle.opacity = roundedOpacity.toString()\n      slideStyle.pointerEvents = opacity > 0.5 ? 'auto' : 'none'\n\n      if (!hasOpacity) slideStyle.transform = transform\n    })\n  }\n\n  function setProgress(fadeIndex: number, opacity: number): void {\n    const { index, dragHandler, scrollSnaps } = emblaApi.internalEngine()\n    const pointerDown = dragHandler.pointerDown()\n    const snapFraction = 1 / (scrollSnaps.length - 1)\n\n    let indexA = fadeIndex\n    let indexB = pointerDown\n      ? emblaApi.selectedScrollSnap()\n      : emblaApi.previousScrollSnap()\n\n    if (pointerDown && indexA === indexB) {\n      const reverseSign = Math.sign(distanceFromPointerDown) * -1\n      indexA = indexB\n      indexB = index.clone().set(indexB).add(reverseSign).get()\n    }\n\n    const currentPosition = indexB * snapFraction\n    const diffPosition = (indexA - indexB) * snapFraction\n    progress = currentPosition + diffPosition * opacity\n  }\n\n  function getFadeIndex(): number | null {\n    const { dragHandler, index, scrollBody } = emblaApi.internalEngine()\n    const selectedSnap = emblaApi.selectedScrollSnap()\n\n    if (!dragHandler.pointerDown()) return selectedSnap\n\n    const directionSign = Math.sign(scrollBody.velocity())\n    const distanceSign = Math.sign(distanceFromPointerDown)\n    const nextSnap = index\n      .clone()\n      .set(selectedSnap)\n      .add(directionSign * -1)\n      .get()\n\n    if (!directionSign || !distanceSign) return null\n    return distanceSign === directionSign ? nextSnap : selectedSnap\n  }\n\n  const fade = (emblaApi: EmblaCarouselType): void => {\n    const { dragHandler, scrollBody } = emblaApi.internalEngine()\n    const pointerDown = dragHandler.pointerDown()\n    const velocity = scrollBody.velocity()\n    const duration = scrollBody.duration()\n    const fadeIndex = getFadeIndex()\n    const noFadeIndex = !isNumber(fadeIndex)\n\n    if (pointerDown) {\n      if (!velocity) return\n\n      distanceFromPointerDown += velocity\n      fadeVelocity = Math.abs(velocity / fadeToNextDistance)\n      lockExcessiveScroll(fadeIndex)\n    }\n\n    if (!pointerDown) {\n      if (!duration || noFadeIndex) return\n\n      fadeVelocity += (fullOpacity - opacities[fadeIndex]) / duration\n      fadeVelocity *= fadeFriction\n    }\n\n    if (noFadeIndex) return\n    setOpacities(fadeIndex, fadeVelocity)\n  }\n\n  function settled(): boolean {\n    const { target, location } = emblaApi.internalEngine()\n    const diffToTarget = target.get() - location.get()\n    const notReachedTarget = Math.abs(diffToTarget) >= 1\n    const fadeIndex = getFadeIndex()\n    const noFadeIndex = !isNumber(fadeIndex)\n\n    fade(emblaApi)\n\n    if (noFadeIndex || notReachedTarget) return false\n    return opacities[fadeIndex] > 0.999\n  }\n\n  function scrollProgress(): number {\n    return progress\n  }\n\n  const self: FadeType = {\n    name: 'fade',\n    options: userOptions,\n    init,\n    destroy\n  }\n  return self\n}\n\nFade.globalOptions = <FadeOptionsType | undefined>undefined\n\nexport default Fade\n","import React from 'react'\nimport { EmblaOptionsType } from 'embla-carousel'\nimport useEmblaCarousel from 'embla-carousel-react'\nimport Fade from 'embla-carousel-fade'\nimport {\n  NextButton,\n  PrevButton,\n  usePrevNextButtons\n} from '../EmblaCarouselArrowButtons'\nimport { DotButton, useDotButton } from '../EmblaCarouselDotButton'\nimport { sandboxImages } from 'components/Sandbox/sandboxImages'\n\ntype PropType = {\n  slides: number[]\n  options?: EmblaOptionsType\n}\n\nconst EmblaCarousel: React.FC<PropType> = (props) => {\n  const { slides, options } = props\n  const [emblaRef, emblaApi] = useEmblaCarousel(options, [Fade()])\n\n  const { selectedIndex, scrollSnaps, onDotButtonClick } =\n    useDotButton(emblaApi)\n\n  const {\n    prevBtnDisabled,\n    nextBtnDisabled,\n    onPrevButtonClick,\n    onNextButtonClick\n  } = usePrevNextButtons(emblaApi)\n\n  return (\n    <div className=\"embla\">\n      <div className=\"embla__viewport\" ref={emblaRef}>\n        <div className=\"embla__container\">\n          {slides.map((index) => (\n            <div className=\"embla__slide\" key={index}>\n              <img\n                className=\"embla__slide__img\"\n                src={sandboxImages(index)}\n                alt=\"Your alt text\"\n              />\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <div className=\"embla__controls\">\n        <div className=\"embla__buttons\">\n          <PrevButton onClick={onPrevButtonClick} disabled={prevBtnDisabled} />\n          <NextButton onClick={onNextButtonClick} disabled={nextBtnDisabled} />\n        </div>\n\n        <div className=\"embla__dots\">\n          {scrollSnaps.map((_, index) => (\n            <DotButton\n              key={index}\n              onClick={() => onDotButtonClick(index)}\n              className={'embla__dot'.concat(\n                index === selectedIndex ? ' embla__dot--selected' : ''\n              )}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default EmblaCarousel\n","import image1 from 'assets/images/slide-1.jpg'\nimport image2 from 'assets/images/slide-2.jpg'\nimport image3 from 'assets/images/slide-3.jpg'\nimport image4 from 'assets/images/slide-4.jpg'\nimport image5 from 'assets/images/slide-5.jpg'\n\nconst sandboxImageList: string[] = [image1, image2, image3, image4, image5]\n\nexport const sandboxImages = (index: number): string =>\n  sandboxImageList[index % sandboxImageList.length]\n","export default __webpack_public_path__ + \"static/slide-1-47ed6052f4455272d8f76db16447d760.jpg\";","export default __webpack_public_path__ + \"static/slide-2-dc15cfe63eb4aeb8c9c09823179ee64c.jpg\";","export default __webpack_public_path__ + \"static/slide-3-6362505742d23d7cd240880140151a95.jpg\";","export default __webpack_public_path__ + \"static/slide-4-ebad84cfea5ff9481504ded363c22003.jpg\";","export default __webpack_public_path__ + \"static/slide-5-2d88e98502aa565d6269834d7a7be406.jpg\";"],"names":["useDotButton","emblaApi","onButtonClick","selectedIndex","setSelectedIndex","useState","scrollSnaps","setScrollSnaps","onDotButtonClick","useCallback","index","scrollTo","onInit","scrollSnapList","onSelect","selectedScrollSnap","useEffect","on","DotButton","props","children","restProps","React","Object","assign","type","clampNumber","number","min","max","Math","isNumber","value","isNaN","Fade","userOptions","fullOpacity","noOpacity","fadeToNextDistance","defaultSettledBehaviour","defaultProgressBehaviour","opacities","distanceFromPointerDown","fadeVelocity","progress","fadeToSelectedSnapInstantly","setOpacities","pointerDown","select","duration","internalEngine","scrollBody","lockExcessiveScroll","fadeIndex","location","target","set","velocity","forEach","_","absVelocity","abs","currentOpacity","isFadeIndex","clampedOpacity","opacity","dragHandler","snapFraction","length","indexA","indexB","previousScrollSnap","reverseSign","sign","clone","add","get","setProgress","slidesInSnap","slideRegistry","containerRect","slideIndex","slideStyle","slideNodes","style","roundedOpacity","parseFloat","toFixed","hasOpacity","transform","position","axis","scroll","toUpperCase","direction","getSlideTransform","width","toString","pointerEvents","setOpacity","getFadeIndex","selectedSnap","directionSign","distanceSign","nextSnap","fade","noFadeIndex","settled","diffToTarget","notReachedTarget","scrollProgress","name","options","init","emblaApiInstance","containerSize","measureSize","map","translate","slideLooper","clear","toggleActive","loopPoints","_ref","disableScroll","destroy","off","slideNode","getAttribute","removeAttribute","globalOptions","undefined","slides","emblaRef","useEmblaCarousel","prevBtnDisabled","nextBtnDisabled","onPrevButtonClick","onNextButtonClick","usePrevNextButtons","className","ref","key","src","sandboxImages","alt","PrevButton","onClick","disabled","NextButton","concat","sandboxImageList"],"sourceRoot":""}