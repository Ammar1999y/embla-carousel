{"version":3,"file":"6128-c5fc044a884df4651b47.js","mappings":"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","sources":["webpack://embla-carousel-docs/./src/components/Sandbox/React/SandboxFilesSrc/ClassNames/EmblaCarousel.tsx","webpack://embla-carousel-docs/./src/components/Sandbox/React/SandboxFilesSrc/EmblaCarouselDotButton.tsx","webpack://embla-carousel-docs/./src/components/Sandbox/sandboxImages.ts","webpack://embla-carousel-docs/./src/assets/images/slide-1.jpg","webpack://embla-carousel-docs/./src/assets/images/slide-2.jpg","webpack://embla-carousel-docs/./src/assets/images/slide-3.jpg","webpack://embla-carousel-docs/./src/assets/images/slide-4.jpg","webpack://embla-carousel-docs/./src/assets/images/slide-5.jpg","webpack://embla-carousel-docs/../src/components/Options.ts","webpack://embla-carousel-docs/../src/components/utils.ts","webpack://embla-carousel-docs/../src/components/ClassNames.ts"],"sourcesContent":["import React from 'react'\nimport { EmblaOptionsType } from 'embla-carousel'\nimport useEmblaCarousel from 'embla-carousel-react'\nimport ClassNames from 'embla-carousel-class-names'\nimport {\n  NextButton,\n  PrevButton,\n  usePrevNextButtons\n} from '../EmblaCarouselArrowButtons'\nimport { DotButton, useDotButton } from '../EmblaCarouselDotButton'\nimport { sandboxImages } from 'components/Sandbox/sandboxImages'\n\ntype PropType = {\n  slides: number[]\n  options?: EmblaOptionsType\n}\n\nconst EmblaCarousel: React.FC<PropType> = (props) => {\n  const { slides, options } = props\n  const [emblaRef, emblaApi] = useEmblaCarousel(options, [ClassNames()])\n\n  const { selectedIndex, scrollSnaps, onDotButtonClick } =\n    useDotButton(emblaApi)\n\n  const {\n    prevBtnDisabled,\n    nextBtnDisabled,\n    onPrevButtonClick,\n    onNextButtonClick\n  } = usePrevNextButtons(emblaApi)\n\n  return (\n    <div className=\"embla\">\n      <div className=\"embla__viewport\" ref={emblaRef}>\n        <div className=\"embla__container\">\n          {slides.map((index) => (\n            <div className=\"embla__slide\" key={index}>\n              <img\n                className=\"embla__slide__img\"\n                src={sandboxImages(index)}\n                alt=\"Your alt text\"\n              />\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <div className=\"embla__controls\">\n        <div className=\"embla__buttons\">\n          <PrevButton onClick={onPrevButtonClick} disabled={prevBtnDisabled} />\n          <NextButton onClick={onNextButtonClick} disabled={nextBtnDisabled} />\n        </div>\n\n        <div className=\"embla__dots\">\n          {scrollSnaps.map((_, index) => (\n            <DotButton\n              key={index}\n              onClick={() => onDotButtonClick(index)}\n              className={'embla__dot'.concat(\n                index === selectedIndex ? ' embla__dot--selected' : ''\n              )}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default EmblaCarousel\n","import React, {\n  ComponentPropsWithRef,\n  useCallback,\n  useEffect,\n  useState\n} from 'react'\nimport { EmblaCarouselType } from 'embla-carousel'\n\ntype UseDotButtonType = {\n  selectedIndex: number\n  scrollSnaps: number[]\n  onDotButtonClick: (index: number) => void\n}\n\nexport const useDotButton = (\n  emblaApi: EmblaCarouselType | undefined,\n  onButtonClick?: (emblaApi: EmblaCarouselType) => void\n): UseDotButtonType => {\n  const [selectedIndex, setSelectedIndex] = useState(0)\n  const [scrollSnaps, setScrollSnaps] = useState<number[]>([])\n\n  const onDotButtonClick = useCallback(\n    (index: number) => {\n      if (!emblaApi) return\n      emblaApi.scrollTo(index)\n      if (onButtonClick) onButtonClick(emblaApi)\n    },\n    [emblaApi, onButtonClick]\n  )\n\n  const onInit = useCallback((emblaApi: EmblaCarouselType) => {\n    setScrollSnaps(emblaApi.scrollSnapList())\n  }, [])\n\n  const onSelect = useCallback((emblaApi: EmblaCarouselType) => {\n    setSelectedIndex(emblaApi.selectedScrollSnap())\n  }, [])\n\n  useEffect(() => {\n    if (!emblaApi) return\n\n    onInit(emblaApi)\n    onSelect(emblaApi)\n\n    emblaApi.on('reInit', onInit).on('reInit', onSelect).on('select', onSelect)\n  }, [emblaApi, onInit, onSelect])\n\n  return {\n    selectedIndex,\n    scrollSnaps,\n    onDotButtonClick\n  }\n}\n\ntype PropType = ComponentPropsWithRef<'button'>\n\nexport const DotButton: React.FC<PropType> = (props) => {\n  const { children, ...restProps } = props\n\n  return (\n    <button type=\"button\" {...restProps}>\n      {children}\n    </button>\n  )\n}\n","import image1 from 'assets/images/slide-1.jpg'\nimport image2 from 'assets/images/slide-2.jpg'\nimport image3 from 'assets/images/slide-3.jpg'\nimport image4 from 'assets/images/slide-4.jpg'\nimport image5 from 'assets/images/slide-5.jpg'\n\nconst sandboxImageList: string[] = [image1, image2, image3, image4, image5]\n\nexport const sandboxImages = (index: number): string =>\n  sandboxImageList[index % sandboxImageList.length]\n","export default __webpack_public_path__ + \"static/slide-1-47ed6052f4455272d8f76db16447d760.jpg\";","export default __webpack_public_path__ + \"static/slide-2-dc15cfe63eb4aeb8c9c09823179ee64c.jpg\";","export default __webpack_public_path__ + \"static/slide-3-6362505742d23d7cd240880140151a95.jpg\";","export default __webpack_public_path__ + \"static/slide-4-ebad84cfea5ff9481504ded363c22003.jpg\";","export default __webpack_public_path__ + \"static/slide-5-2d88e98502aa565d6269834d7a7be406.jpg\";","import { CreateOptionsType } from 'embla-carousel'\n\nexport type ClassNameOptionType = string | string[]\n\nexport type ClassNamesListType = {\n  [K in keyof Omit<OptionsType, 'active' | 'breakpoints'>]: string[]\n}\n\nexport type OptionsType = CreateOptionsType<{\n  snapped: ClassNameOptionType\n  inView: ClassNameOptionType\n  draggable: ClassNameOptionType\n  dragging: ClassNameOptionType\n  loop: ClassNameOptionType\n}>\n\nexport const defaultOptions: OptionsType = {\n  active: true,\n  breakpoints: {},\n  snapped: 'is-snapped',\n  inView: 'is-in-view',\n  draggable: 'is-draggable',\n  dragging: 'is-dragging',\n  loop: 'is-loop'\n}\n","import { ClassNameOptionType } from './Options'\n\nexport function normalizeClassNames(classNames: ClassNameOptionType): string[] {\n  const normalized = Array.isArray(classNames) ? classNames : [classNames]\n  return normalized.filter(Boolean)\n}\n\nexport function removeClass(node: HTMLElement, classNames: string[]): void {\n  if (!node || !classNames.length) return\n  node.classList.remove(...classNames)\n}\n\nexport function addClass(node: HTMLElement, classNames: string[]): void {\n  if (!node || !classNames.length) return\n\n  node.classList.add(...classNames)\n}\n","import {\n  ClassNameOptionType,\n  ClassNamesListType,\n  defaultOptions,\n  OptionsType\n} from './Options'\nimport { addClass, normalizeClassNames, removeClass } from './utils'\nimport {\n  CreatePluginType,\n  OptionsHandlerType,\n  EmblaCarouselType,\n  EmblaEventType\n} from 'embla-carousel'\n\ndeclare module 'embla-carousel' {\n  interface EmblaPluginsType {\n    classNames: ClassNamesType\n  }\n}\n\nexport type ClassNamesType = CreatePluginType<{}, OptionsType>\n\nexport type ClassNamesOptionsType = ClassNamesType['options']\n\nfunction ClassNames(userOptions: ClassNamesOptionsType = {}): ClassNamesType {\n  let options: OptionsType\n  let emblaApi: EmblaCarouselType\n  let root: HTMLElement\n  let slides: HTMLElement[]\n  let snappedIndexes: number[] = []\n  let inViewIndexes: number[] = []\n  const selectedEvents: EmblaEventType[] = ['select']\n  const draggingEvents: EmblaEventType[] = ['pointerDown', 'pointerUp']\n  const inViewEvents: EmblaEventType[] = ['slidesInView']\n  const classNames: { [K in keyof ClassNamesListType]: string[] } = {\n    snapped: [],\n    inView: [],\n    draggable: [],\n    dragging: [],\n    loop: []\n  }\n\n  function init(\n    emblaApiInstance: EmblaCarouselType,\n    optionsHandler: OptionsHandlerType\n  ): void {\n    emblaApi = emblaApiInstance\n\n    const { mergeOptions, optionsAtMedia } = optionsHandler\n    const optionsBase = mergeOptions(defaultOptions, ClassNames.globalOptions)\n    const allOptions = mergeOptions(optionsBase, userOptions)\n    options = optionsAtMedia(allOptions)\n\n    root = emblaApi.rootNode()\n    slides = emblaApi.slideNodes()\n\n    const { watchDrag, loop } = emblaApi.internalEngine().options\n    const isDraggable = !!watchDrag\n\n    if (options.loop && loop) {\n      classNames.loop = normalizeClassNames(options.loop)\n      addClass(root, classNames.loop)\n    }\n    if (options.draggable && isDraggable) {\n      classNames.draggable = normalizeClassNames(options.draggable)\n      addClass(root, classNames.draggable)\n    }\n    if (options.dragging) {\n      classNames.dragging = normalizeClassNames(options.dragging)\n      draggingEvents.forEach((evt) => emblaApi.on(evt, toggleDraggingClass))\n    }\n    if (options.snapped) {\n      classNames.snapped = normalizeClassNames(options.snapped)\n      selectedEvents.forEach((evt) => emblaApi.on(evt, toggleSnappedClasses))\n      toggleSnappedClasses()\n    }\n    if (options.inView) {\n      classNames.inView = normalizeClassNames(options.inView)\n      inViewEvents.forEach((evt) => emblaApi.on(evt, toggleInViewClasses))\n      toggleInViewClasses()\n    }\n  }\n\n  function destroy(): void {\n    draggingEvents.forEach((evt) => emblaApi.off(evt, toggleDraggingClass))\n    selectedEvents.forEach((evt) => emblaApi.off(evt, toggleSnappedClasses))\n    inViewEvents.forEach((evt) => emblaApi.off(evt, toggleInViewClasses))\n\n    removeClass(root, classNames.loop)\n    removeClass(root, classNames.draggable)\n    removeClass(root, classNames.dragging)\n    toggleSlideClasses([], snappedIndexes, classNames.snapped)\n    toggleSlideClasses([], inViewIndexes, classNames.inView)\n  }\n\n  function toggleDraggingClass(\n    _: EmblaCarouselType,\n    evt: EmblaEventType\n  ): void {\n    const toggleClass = evt === 'pointerDown' ? addClass : removeClass\n    toggleClass(root, classNames.dragging)\n  }\n\n  function toggleSlideClasses(\n    addClassIndexes: number[] = [],\n    removeClassIndexes: number[] = [],\n    classNames: string[]\n  ): number[] {\n    const removeClassSlides = removeClassIndexes.map((index) => slides[index])\n    const addClassSlides = addClassIndexes.map((index) => slides[index])\n\n    removeClassSlides.forEach((slide) => removeClass(slide, classNames))\n    addClassSlides.forEach((slide) => addClass(slide, classNames))\n\n    return addClassIndexes\n  }\n\n  function toggleSnappedClasses(): void {\n    const { slideRegistry } = emblaApi.internalEngine()\n    const newSnappedIndexes = slideRegistry[emblaApi.selectedScrollSnap()]\n\n    snappedIndexes = toggleSlideClasses(\n      newSnappedIndexes,\n      snappedIndexes,\n      classNames.snapped\n    )\n  }\n\n  function toggleInViewClasses(): void {\n    const newInViewIndexes = emblaApi.slidesInView()\n\n    inViewIndexes = toggleSlideClasses(\n      newInViewIndexes,\n      inViewIndexes,\n      classNames.inView\n    )\n  }\n\n  const self: ClassNamesType = {\n    name: 'classNames',\n    options: userOptions,\n    init,\n    destroy\n  }\n  return self\n}\n\ndeclare namespace ClassNames {\n  let globalOptions: ClassNamesOptionsType | undefined\n}\n\nClassNames.globalOptions = undefined\n\nexport default ClassNames\n"],"names":["props","slides","options","emblaRef","emblaApi","useEmblaCarousel","ClassNames","selectedIndex","scrollSnaps","onDotButtonClick","useDotButton","prevBtnDisabled","nextBtnDisabled","onPrevButtonClick","onNextButtonClick","usePrevNextButtons","React","className","ref","map","index","key","src","sandboxImages","alt","PrevButton","onClick","disabled","NextButton","_","DotButton","concat","onButtonClick","setSelectedIndex","useState","setScrollSnaps","useCallback","scrollTo","onInit","scrollSnapList","onSelect","selectedScrollSnap","useEffect","on","children","restProps","Object","assign","type","sandboxImageList","length","defaultOptions","active","breakpoints","snapped","inView","draggable","dragging","loop","normalizeClassNames","classNames","Array","isArray","filter","Boolean","removeClass","node","_node$classList","classList","remove","apply","_toConsumableArray","addClass","_node$classList2","add","userOptions","root","snappedIndexes","inViewIndexes","selectedEvents","draggingEvents","inViewEvents","toggleDraggingClass","evt","toggleSlideClasses","addClassIndexes","removeClassIndexes","removeClassSlides","addClassSlides","forEach","slide","toggleSnappedClasses","slideRegistry","internalEngine","newSnappedIndexes","toggleInViewClasses","newInViewIndexes","slidesInView","name","init","emblaApiInstance","optionsHandler","mergeOptions","optionsAtMedia","optionsBase","globalOptions","allOptions","rootNode","slideNodes","watchDrag","isDraggable","destroy","off","undefined"],"sourceRoot":""}